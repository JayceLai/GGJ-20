CCEffect %{
  techniques:
  - passes:
    - vert: billboard-vs:vert
      frag: billboard-fs:frag
      priority: DEFAULT + 1
      depthStencilState:
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties:
        mainTexture: {}
        dimensions:      { value: [2, 2], target: seqAnimParams.xy }
        frames:          { value: 4, target: seqAnimParams.z }
        speedOrProgress: { value: 10, target: seqAnimParams.w }
}%

CCProgram billboard-vs %{
  precision mediump float;
  #include <cc-global>
  #include <cc-local-batch>
  #include <input>

  #if USE_INSTANCING
    in vec4 a_tiling_offset;
  #endif

  in vec2 a_texCoord;
  out vec2 v_texCoord;

  uniform SeqAnimConstants {
    vec4 seqAnimParams;
  };

  vec4 vert () {
    vec4 position;
    CCVertInput(position);

    mat4 matWorld;
    CCGetWorldMatrix(matWorld);

    v_texCoord = a_texCoord;

    #if USE_INSTANCING
      v_texCoord = v_texCoord * a_tiling_offset.xy + a_tiling_offset.zw;
    #endif

    float seqAnimCurFrame = mod(cc_time.x, seqAnimParams.z / seqAnimParams.w) * seqAnimParams.w; // iOS precision issue
    vec2 seqAnimOffset = floor(vec2(mod(seqAnimCurFrame, seqAnimParams.x), seqAnimCurFrame / seqAnimParams.x));
    v_texCoord = (v_texCoord + seqAnimOffset) / seqAnimParams.xy;

    vec4 pos = cc_matView[3] + cc_matView * vec4(matWorld[3].xyz, 0) + vec4(position.xyz * vec3(2, 2, 1), 0);
    return cc_matProj * pos;
  }
}%

CCProgram billboard-fs %{
  precision highp float;
  #include <output>

  in vec2 v_texCoord;

  uniform sampler2D mainTexture;

  vec4 frag () {
    #if USE_INSTANCING
      return CCFragOutput(texture(mainTexture, v_texCoord));
    #else
      return CCFragOutput(vec4(0.3, 0.5, 0.7, 1.0));
    #endif
  }
}%
