[{"__type__":"cc.EffectAsset","_name":"builtin-standard","techniques":[{"name":"opaque","passes":[{"program":"builtin-standard|standard-vs:vert|standard-fs:frag","properties":{"tilingOffset":{"value":[1,1,0,0],"type":16},"mainColor":{"value":[1,1,1,1],"type":16,"handleInfo":["albedo",0,16]},"albedoScale":{"value":[1,1,1],"type":15,"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"value":[0.5],"type":13,"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"value":[1],"type":13,"handleInfo":["pbrParams",0,13]},"roughness":{"value":[0.8],"type":13,"handleInfo":["pbrParams",1,13]},"metallic":{"value":[0.6],"type":13,"handleInfo":["pbrParams",2,13]},"normalStrenth":{"value":[1],"type":13,"handleInfo":["pbrParams",3,13]},"emissive":{"value":[0,0,0,1],"type":16},"emissiveScale":{"value":[1,1,1],"type":15,"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"pbrParams":{"type":16,"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey"}}}]},{"name":"transparent","passes":[{"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"program":"builtin-standard|standard-vs:vert|standard-fs:frag","depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"value":[1,1,0,0],"type":16},"mainColor":{"value":[1,1,1,1],"type":16,"handleInfo":["albedo",0,16]},"albedoScale":{"value":[1,1,1],"type":15,"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"value":[0.5],"type":13,"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"value":[1],"type":13,"handleInfo":["pbrParams",0,13]},"roughness":{"value":[0.8],"type":13,"handleInfo":["pbrParams",1,13]},"metallic":{"value":[0.6],"type":13,"handleInfo":["pbrParams",2,13]},"normalStrenth":{"value":[1],"type":13,"handleInfo":["pbrParams",3,13]},"emissive":{"value":[0,0,0,1],"type":16},"emissiveScale":{"value":[1,1,1],"type":15,"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"pbrParams":{"type":16,"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey"}}}]}],"shaders":[{"hash":433041798,"glsl3":{"vert":"\nprecision highp float;\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n        return int(a_vertexId);\n    }\nuniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n};\n    vec4 fetchFlatPixel(sampler2D tex, int pixelIndex) {\n        float pixelIndexF = float(pixelIndex);\n        vec2 textureResolution = vec2(float(cc_displacementTextureInfo.x), float(cc_displacementTextureInfo.y));\n        float pixelX = mod(pixelIndexF, textureResolution.x);\n        float pixelY = floor(pixelIndexF / textureResolution.x);\n        vec2 uv = (vec2(pixelX, pixelY) + .5) / textureResolution;\n        return texture(tex, uv);\n    }\nfloat getDisplacementWeight(int index) {\n    float m = mod(float(index), 4.0);\n    if (m < 1.0) {\n        return cc_displacementWeights[index / 4].x;\n    } else if (m < 2.0) {\n        return cc_displacementWeights[index / 4].y;\n    } else if (m < 3.0) {\n        return cc_displacementWeights[index / 4].z;\n    } else {\n        return cc_displacementWeights[index / 4].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchFlatPixel(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        int dataPixelStart = int(fetchFlatPixel(tex, iTarget).r);\n        result += (fetchFlatPixel(tex, dataPixelStart + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nin vec4 a_weights;\nin vec4 a_joints;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - step(127.99, rgba[3]) * 2.0;\n  highp float Exponent = 2.0 * mod(rgba[3], 127.99) + step(128.0, rgba[2]) - 127.0;\n  highp float Mantissa = mod(rgba[2], 128.0) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  uniform CCSkinningTexture {\n    highp vec4 cc_jointTextureInfo;\n  };\n  uniform CCSkinningAnimation {\n    highp vec4 cc_jointAnimInfo;\n  };\n  uniform sampler2D cc_jointTexture;\n  #else\n  uniform CCSkinning {\n    highp vec4 cc_joints[30 * 3];\n  };\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  return getJointMatrix(a_joints.x) * a_weights.x\n       + getJointMatrix(a_joints.y) * a_weights.y\n       + getJointMatrix(a_joints.z) * a_weights.z\n       + getJointMatrix(a_joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n#if USE_LIGHTMAP\n  in vec4 a_lightingMapUVParam;\n#endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\nuniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\n#endif\nuniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\n#if USE_VERTEX_COLOR\n  in vec3 a_color;\n  out vec3 v_color;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\nin vec2 a_texCoord;\nout vec2 v_uv;\nin vec2 a_texCoord1;\nout vec2 v_uv1;\n#if USE_LIGHTMAP && !USE_BATCHING\n  out vec2 v_luv;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  #if USE_LIGHTMAP && HAS_SECOND_UV && !USE_BATCHING && !USE_INSTANCING\n    v_luv = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n  #endif\n  #if USE_LIGHTMAP && HAS_SECOND_UV && !USE_BATCHING && USE_INSTANCING\n    v_luv = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n  #endif\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\n#if CC_USE_IBL\nuniform samplerCube cc_environment;\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\n#endif\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform CCForwardLight {\n  highp vec4 cc_sphereLitPos[2];\n  vec4 cc_sphereLitSizeRange[2];\n  vec4 cc_sphereLitColor[2];\n  highp vec4 cc_spotLitPos[2];\n  vec4 cc_spotLitSizeRangeAngle[2];\n  vec4 cc_spotLitDir[2];\n  vec4 cc_spotLitColor[2];\n};\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n  float factor = distSqr * invSqrAttRadius;\n  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n  return smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\n  float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n  return attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n  float cd = dot(litDir, L);\n  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n  return (attenuation * attenuation);\n}\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness*0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min( r.x * r.x, exp2( -9.28 * NoV ) ) * r.x + r.y;\n  vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\nvec3 CalcDynamicLighting (vec3 worldPos, vec3 N, vec3 V, vec3 diffuse, vec3 specular, float roughness) {\n  vec3 lighting = vec3(0.0);\n  vec3 diffuseContrib = diffuse / 3.14159265359;\n  for (int i = 0; i < 2; i++) {\n    vec3 PLU = cc_sphereLitPos[i].xyz - worldPos;\n    vec3 PL = normalize(PLU);\n    vec3 PH = normalize(PL + V);\n    float PNL = max(dot(N, PL), 0.001);\n    float PNH = max(dot(N, PH), 0.0);\n    float distSqr = dot(PLU, PLU);\n    float litRadius = cc_sphereLitSizeRange[i].x;\n    float litRadiusSqr = litRadius * litRadius;\n    float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n    float attRadiusSqrInv = 1.0 / max(cc_sphereLitSizeRange[i].y, 0.01);\n    attRadiusSqrInv *= attRadiusSqrInv;\n    float att = GetDistAtt(distSqr, attRadiusSqrInv);\n    vec3 lspec = specular * CalcSpecular(roughness, PNH, PH, N);\n    lighting += PNL * cc_sphereLitColor[i].rgb * cc_sphereLitColor[i].w * illum * att * (diffuseContrib + lspec);\n  }\n  for (int i = 0; i < 2; i++) {\n    vec3 SLU = cc_spotLitPos[i].xyz - worldPos;\n    vec3 SL = normalize(SLU);\n    vec3 SH = normalize(SL + V);\n    float SNL = max(dot(N, SL), 0.001);\n    float SNH = max(dot(N, SH), 0.0);\n    float distSqr = dot(SLU, SLU);\n    float litRadius = cc_spotLitSizeRangeAngle[i].x;\n    float litRadiusSqr = litRadius * litRadius;\n    float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n    float attRadiusSqrInv = 1.0 / max(cc_spotLitSizeRangeAngle[i].y, 0.01);\n    attRadiusSqrInv *= attRadiusSqrInv;\n    float cosInner = max(dot(-cc_spotLitDir[i].xyz, SL), 0.01);\n    float cosOuter = cc_spotLitSizeRangeAngle[i].z;\n    float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n    float litAngleOffset = -cosOuter * litAngleScale;\n    float att = GetDistAtt(distSqr, attRadiusSqrInv);\n    att *= GetAngleAtt(SL, -cc_spotLitDir[i].xyz, litAngleScale, litAngleOffset);\n    vec3 lspec = specular * CalcSpecular(roughness, SNH, SH, N);\n    lighting += SNL * cc_spotLitColor[i].rgb * cc_spotLitColor[i].w * illum * att * (diffuseContrib + lspec);\n  }\n  return lighting;\n}\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShading (StandardSurface s) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - s.position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L+V);\n  float NV = max(abs(dot(N, V)), 0.001);\n  float NL = max(dot(N, L), 0.001);\n  float NH = max(dot(N, H), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 diffuseContrib = diffuse / 3.14159265359;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w * (diffuseContrib + specularContrib);\n  finalColor += CalcDynamicLighting(s.position, N, V, diffuse, specular, s.roughness);\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n  finalColor += (ambDiff.rgb * diffuse);\n  #if CC_USE_IBL\n    vec3 R = normalize(reflect(-V, N));\n    vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n    #if CC_USE_IBL == 2\n      vec3 env = unpackRGBE(envmap);\n    #else\n      vec3 env = SRGBToLinear(envmap.rgb);\n    #endif\n    finalColor += env * cc_ambientSky.w * specular;\n  #endif\n  finalColor = finalColor * s.occlusion;\n  #if CC_USE_HDR\n    s.emissive *= cc_exposure.w;\n  #endif\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nuniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nin vec3 v_position;\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec3 v_normal;\n#if USE_VERTEX_COLOR\n  in vec3 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_LIGHTMAP\n  in vec2 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= v_color;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * pbrParams.w) * normalize(v_tangent) +\n      (nmmp.y * pbrParams.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.OCCLUSION_CHANNEL;\n    pbr.y *= res.ROUGHNESS_CHANNEL;\n    pbr.z *= res.METALLIC_CHANNEL;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, METALLIC_ROUGHNESS_UV);\n    pbr.z *= metallicRoughness.METALLIC_CHANNEL;\n    pbr.y *= metallicRoughness.ROUGHNESS_CHANNEL;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, OCCLUSION_UV).OCCLUSION_CHANNEL;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\nvec4 frag () {\n  StandardSurface s; surf(s);\n  vec4 color = CCStandardShading(s);\n  #if USE_LIGHTMAP && !USE_BATCHING\n    vec4 lighting = texture(cc_lightingMap, v_luv);\n    float fAmb = 0.5 - s.normal.y * 0.5;\n    vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 finalColor = (ambDiff.rgb * diffuse);\n    finalColor += lighting.rgb * diffuse;\n    finalColor = finalColor * s.occlusion;\n    finalColor += s.emissive;\n    color.rgb = lighting.a * finalColor + (1.0 - lighting.a) * color.rgb;\n  #endif\n  return CCFragOutput(color);\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n        return int(a_vertexId);\n    }\nuniform vec4 cc_displacementWeights[15];\nuniform vec4 cc_displacementTextureInfo;\n    vec4 fetchFlatPixel(sampler2D tex, int pixelIndex) {\n        float pixelIndexF = float(pixelIndex);\n        vec2 textureResolution = vec2(float(cc_displacementTextureInfo.x), float(cc_displacementTextureInfo.y));\n        float pixelX = mod(pixelIndexF, textureResolution.x);\n        float pixelY = floor(pixelIndexF / textureResolution.x);\n        vec2 uv = (vec2(pixelX, pixelY) + .5) / textureResolution;\n        return texture2D(tex, uv);\n    }\nfloat getDisplacementWeight(int index) {\n    float m = mod(float(index), 4.0);\n    if (m < 1.0) {\n        return cc_displacementWeights[index / 4].x;\n    } else if (m < 2.0) {\n        return cc_displacementWeights[index / 4].y;\n    } else if (m < 3.0) {\n        return cc_displacementWeights[index / 4].z;\n    } else {\n        return cc_displacementWeights[index / 4].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchFlatPixel(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        int dataPixelStart = int(fetchFlatPixel(tex, iTarget).r);\n        result += (fetchFlatPixel(tex, dataPixelStart + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nattribute vec4 a_weights;\nattribute vec4 a_joints;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - step(127.99, rgba[3]) * 2.0;\n  highp float Exponent = 2.0 * mod(rgba[3], 127.99) + step(128.0, rgba[2]) - 127.0;\n  highp float Mantissa = mod(rgba[2], 128.0) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  uniform highp vec4 cc_jointTextureInfo;\n  uniform highp vec4 cc_jointAnimInfo;\n  uniform sampler2D cc_jointTexture;\n  #else\n  uniform highp vec4 cc_joints[90];\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  return getJointMatrix(a_joints.x) * a_weights.x\n       + getJointMatrix(a_joints.y) * a_weights.y\n       + getJointMatrix(a_joints.z) * a_weights.z\n       + getJointMatrix(a_joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nuniform highp mat4 cc_matView;\nuniform highp mat4 cc_matProj;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n#if USE_LIGHTMAP\n  attribute vec4 a_lightingMapUVParam;\n#endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\nuniform highp mat4 cc_matWorld;\nuniform highp mat4 cc_matWorldIT;\nuniform highp vec4 cc_lightingMapUVParam;\n#endif\nuniform vec4 tilingOffset;\n#if USE_VERTEX_COLOR\n  attribute vec3 a_color;\n  varying vec3 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\nattribute vec2 a_texCoord;\nvarying vec2 v_uv;\nattribute vec2 a_texCoord1;\nvarying vec2 v_uv1;\n#if USE_LIGHTMAP && !USE_BATCHING\n  varying vec2 v_luv;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  #if USE_LIGHTMAP && HAS_SECOND_UV && !USE_BATCHING && !USE_INSTANCING\n    v_luv = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n  #endif\n  #if USE_LIGHTMAP && HAS_SECOND_UV && !USE_BATCHING && USE_INSTANCING\n    v_luv = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n  #endif\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\n  #ifdef GL_EXT_shader_texture_lod\n    #extension GL_EXT_shader_texture_lod : enable\n  #endif\nprecision highp float;\nuniform highp vec4 cc_cameraPos;\nuniform mediump vec4 cc_exposure;\nuniform mediump vec4 cc_mainLitDir;\nuniform mediump vec4 cc_mainLitColor;\nuniform mediump vec4 cc_ambientSky;\nuniform mediump vec4 cc_ambientGround;\n#if CC_USE_IBL\nuniform samplerCube cc_environment;\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    #ifdef GL_EXT_shader_texture_lod\n      return texture2DLodEXT(tex, coord, lod);\n    #else\n      return texture2D(tex, coord, lod);\n    #endif\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    #ifdef GL_EXT_shader_texture_lod\n      return textureCubeLodEXT(tex, coord, lod);\n    #else\n      return textureCube(tex, coord, lod);\n    #endif\n}\n#endif\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform highp vec4 cc_sphereLitPos[2];\nuniform vec4 cc_sphereLitSizeRange[2];\nuniform vec4 cc_sphereLitColor[2];\nuniform highp vec4 cc_spotLitPos[2];\nuniform vec4 cc_spotLitSizeRangeAngle[2];\nuniform vec4 cc_spotLitDir[2];\nuniform vec4 cc_spotLitColor[2];\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n  float factor = distSqr * invSqrAttRadius;\n  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n  return smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\n  float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n  return attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n  float cd = dot(litDir, L);\n  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n  return (attenuation * attenuation);\n}\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness*0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min( r.x * r.x, exp2( -9.28 * NoV ) ) * r.x + r.y;\n  vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\nvec3 CalcDynamicLighting (vec3 worldPos, vec3 N, vec3 V, vec3 diffuse, vec3 specular, float roughness) {\n  vec3 lighting = vec3(0.0);\n  vec3 diffuseContrib = diffuse / 3.14159265359;\n  for (int i = 0; i < 2; i++) {\n    vec3 PLU = cc_sphereLitPos[i].xyz - worldPos;\n    vec3 PL = normalize(PLU);\n    vec3 PH = normalize(PL + V);\n    float PNL = max(dot(N, PL), 0.001);\n    float PNH = max(dot(N, PH), 0.0);\n    float distSqr = dot(PLU, PLU);\n    float litRadius = cc_sphereLitSizeRange[i].x;\n    float litRadiusSqr = litRadius * litRadius;\n    float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n    float attRadiusSqrInv = 1.0 / max(cc_sphereLitSizeRange[i].y, 0.01);\n    attRadiusSqrInv *= attRadiusSqrInv;\n    float att = GetDistAtt(distSqr, attRadiusSqrInv);\n    vec3 lspec = specular * CalcSpecular(roughness, PNH, PH, N);\n    lighting += PNL * cc_sphereLitColor[i].rgb * cc_sphereLitColor[i].w * illum * att * (diffuseContrib + lspec);\n  }\n  for (int i = 0; i < 2; i++) {\n    vec3 SLU = cc_spotLitPos[i].xyz - worldPos;\n    vec3 SL = normalize(SLU);\n    vec3 SH = normalize(SL + V);\n    float SNL = max(dot(N, SL), 0.001);\n    float SNH = max(dot(N, SH), 0.0);\n    float distSqr = dot(SLU, SLU);\n    float litRadius = cc_spotLitSizeRangeAngle[i].x;\n    float litRadiusSqr = litRadius * litRadius;\n    float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n    float attRadiusSqrInv = 1.0 / max(cc_spotLitSizeRangeAngle[i].y, 0.01);\n    attRadiusSqrInv *= attRadiusSqrInv;\n    float cosInner = max(dot(-cc_spotLitDir[i].xyz, SL), 0.01);\n    float cosOuter = cc_spotLitSizeRangeAngle[i].z;\n    float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n    float litAngleOffset = -cosOuter * litAngleScale;\n    float att = GetDistAtt(distSqr, attRadiusSqrInv);\n    att *= GetAngleAtt(SL, -cc_spotLitDir[i].xyz, litAngleScale, litAngleOffset);\n    vec3 lspec = specular * CalcSpecular(roughness, SNH, SH, N);\n    lighting += SNL * cc_spotLitColor[i].rgb * cc_spotLitColor[i].w * illum * att * (diffuseContrib + lspec);\n  }\n  return lighting;\n}\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShading (StandardSurface s) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - s.position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L+V);\n  float NV = max(abs(dot(N, V)), 0.001);\n  float NL = max(dot(N, L), 0.001);\n  float NH = max(dot(N, H), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 diffuseContrib = diffuse / 3.14159265359;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w * (diffuseContrib + specularContrib);\n  finalColor += CalcDynamicLighting(s.position, N, V, diffuse, specular, s.roughness);\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n  finalColor += (ambDiff.rgb * diffuse);\n  #if CC_USE_IBL\n    vec3 R = normalize(reflect(-V, N));\n    vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n    #if CC_USE_IBL == 2\n      vec3 env = unpackRGBE(envmap);\n    #else\n      vec3 env = SRGBToLinear(envmap.rgb);\n    #endif\n    finalColor += env * cc_ambientSky.w * specular;\n  #endif\n  finalColor = finalColor * s.occlusion;\n  #if CC_USE_HDR\n    s.emissive *= cc_exposure.w;\n  #endif\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nuniform vec4 albedo;\nuniform vec4 albedoScaleAndCutoff;\nuniform vec4 pbrParams;\nuniform vec4 emissive;\nuniform vec4 emissiveScaleParam;\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_normal;\n#if USE_VERTEX_COLOR\n  varying vec3 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_LIGHTMAP\n  varying vec2 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= v_color;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * pbrParams.w) * normalize(v_tangent) +\n      (nmmp.y * pbrParams.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture2D(pbrMap, PBR_UV);\n    pbr.x *= res.OCCLUSION_CHANNEL;\n    pbr.y *= res.ROUGHNESS_CHANNEL;\n    pbr.z *= res.METALLIC_CHANNEL;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture2D(metallicRoughnessMap, METALLIC_ROUGHNESS_UV);\n    pbr.z *= metallicRoughness.METALLIC_CHANNEL;\n    pbr.y *= metallicRoughness.ROUGHNESS_CHANNEL;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture2D(occlusionMap, OCCLUSION_UV).OCCLUSION_CHANNEL;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\nvec4 frag () {\n  StandardSurface s; surf(s);\n  vec4 color = CCStandardShading(s);\n  #if USE_LIGHTMAP && !USE_BATCHING\n    vec4 lighting = texture2D(cc_lightingMap, v_luv);\n    float fAmb = 0.5 - s.normal.y * 0.5;\n    vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 finalColor = (ambDiff.rgb * diffuse);\n    finalColor += lighting.rgb * diffuse;\n    finalColor = finalColor * s.occlusion;\n    finalColor += s.emissive;\n    color.rgb = lighting.a * finalColor + (1.0 - lighting.a) * color.rgb;\n  #endif\n  return CCFragOutput(color);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[{"name":"cc_environment","defines":["CC_USE_IBL"]}]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":[]}],"samplers":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["USE_LIGHTMAP"]}]}},"defines":[{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_SUPPORT_FLOAT_TEXTURE","type":"boolean"},{"name":"USE_BATCHING","type":"boolean"},{"name":"USE_LIGHTMAP","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"USE_NORMAL_MAP","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"CC_USE_IBL","type":"number","range":[0,2]},{"name":"CC_USE_HDR","type":"boolean"},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"ALBEDO_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"NORMAL_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean"},{"name":"PBR_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean"},{"name":"METALLIC_ROUGHNESS_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_OCCLUSION_MAP","type":"boolean"},{"name":"OCCLUSION_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_EMISSIVE_MAP","type":"boolean"},{"name":"EMISSIVE_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"OCCLUSION_CHANNEL","type":"string","options":["r","g","b"]},{"name":"ROUGHNESS_CHANNEL","type":"string","options":["g","b","r"]},{"name":"METALLIC_CHANNEL","type":"string","options":["b","r","g"]},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r"]}],"blocks":[{"name":"Constants","members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[],"binding":0}],"samplers":[{"name":"albedoMap","type":28,"count":1,"defines":["USE_ALBEDO_MAP"],"binding":31},{"name":"normalMap","type":28,"count":1,"defines":["USE_NORMAL_MAP"],"binding":32},{"name":"pbrMap","type":28,"count":1,"defines":["USE_PBR_MAP"],"binding":33},{"name":"metallicRoughnessMap","type":28,"count":1,"defines":["USE_METALLIC_ROUGHNESS_MAP"],"binding":34},{"name":"occlusionMap","type":28,"count":1,"defines":["USE_OCCLUSION_MAP"],"binding":35},{"name":"emissiveMap","type":28,"count":1,"defines":["USE_EMISSIVE_MAP"],"binding":36}],"attributes":[{"name":"a_position","type":15,"count":1,"defines":[],"format":32,"location":0},{"name":"a_normal","type":15,"count":1,"defines":[],"format":32,"location":1},{"name":"a_tangent","type":16,"count":1,"defines":[],"format":43,"location":2},{"name":"a_vertexId","type":13,"count":1,"defines":["CC_USE_MORPH"],"format":11,"location":3},{"name":"a_weights","type":16,"count":1,"defines":["CC_USE_SKINNING"],"format":43,"location":4},{"name":"a_joints","type":16,"count":1,"defines":["CC_USE_SKINNING"],"format":43,"location":5},{"name":"a_jointAnimInfo","type":16,"count":1,"precision":"highp ","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"],"format":43,"isInstanced":true,"location":6},{"name":"a_matWorld0","type":16,"count":1,"defines":["USE_INSTANCING"],"format":43,"isInstanced":true,"location":7},{"name":"a_matWorld1","type":16,"count":1,"defines":["USE_INSTANCING"],"format":43,"isInstanced":true,"location":8},{"name":"a_matWorld2","type":16,"count":1,"defines":["USE_INSTANCING"],"format":43,"isInstanced":true,"location":9},{"name":"a_lightingMapUVParam","type":16,"count":1,"defines":["USE_INSTANCING","USE_LIGHTMAP"],"format":43,"isInstanced":true,"location":10},{"name":"a_dyn_batch_id","type":13,"count":1,"defines":["!USE_INSTANCING","USE_BATCHING"],"format":11,"location":11},{"name":"a_color","type":15,"count":1,"defines":["USE_VERTEX_COLOR"],"format":32,"location":12},{"name":"a_texCoord","type":14,"count":1,"defines":[],"format":21,"location":13},{"name":"a_texCoord1","type":14,"count":1,"defines":[],"format":21,"location":14}],"record":null,"name":"builtin-standard|standard-vs:vert|standard-fs:frag"}]},{"__type__":"cc.SpriteFrame","content":{"name":"default_progressbar_bg","rect":{"x":0,"y":0,"width":60,"height":15},"offset":{"x":0,"y":0},"originalSize":{"width":60,"height":15},"rotated":false,"capInsets":[10,4,10,4],"texture":"9f2QDdIhtPiY8s+6NCQ8g1@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"default_progressbar","rect":{"x":0,"y":0,"width":30,"height":15},"offset":{"x":0,"y":0},"originalSize":{"width":30,"height":15},"rotated":false,"capInsets":[10,4,10,4],"texture":"24pwTaKGdEbY0aXpIMdeCd@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"ant","rect":{"x":17,"y":16,"width":167,"height":168},"offset":{"x":0.5,"y":0},"originalSize":{"width":200,"height":200},"rotated":false,"capInsets":[0,0,0,0],"texture":"28xuSzDLRL9aofj4164eo4@6c48a"}},{"__type__":"cc.EffectAsset","_name":"builtin-sprite","techniques":[{"passes":[{"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"program":"builtin-sprite|sprite-vs:vert|sprite-fs:frag","priority":244,"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"mainTexture":{"value":"white","type":28}}}]}],"shaders":[{"hash":447598955,"glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\n#if USE_LOCAL\nuniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\n#endif\nin vec3 a_position;\nin vec4 a_color;\nout vec4 color;\nin vec2 a_texCoord;\nout vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nin vec4 color;\n#if USE_TEXTURE\n  in vec2 uv0;\n  uniform sampler2D mainTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= texture(mainTexture, uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  return o;\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matViewProj;\n#if USE_LOCAL\nuniform highp mat4 cc_matWorld;\n#endif\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 color;\nattribute vec2 a_texCoord;\nvarying vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvarying vec4 color;\n#if USE_TEXTURE\n  varying vec2 uv0;\n  uniform sampler2D mainTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= texture2D(mainTexture, uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplers":[]}},"defines":[{"name":"USE_LOCAL","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"},{"name":"IS_GRAY","type":"boolean"}],"blocks":[],"samplers":[{"name":"mainTexture","type":28,"count":1,"defines":["USE_TEXTURE"],"binding":31}],"attributes":[{"name":"a_position","type":15,"count":1,"defines":[],"format":32,"location":0},{"name":"a_color","type":16,"count":1,"defines":[],"format":43,"location":1},{"name":"a_texCoord","type":14,"count":1,"defines":[],"format":21,"location":2}],"record":null,"name":"builtin-sprite|sprite-vs:vert|sprite-fs:frag"}]},{"__type__":"cc.SpriteFrame","content":{"name":"default_btn_pressed","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"texture":"54TknWPwVPqJqeCR+Y/Czo@6c48a"}},{"__type__":"cc.Material","_effectAsset":{"__uuid__":"1brw/JvvpFnIvdrxpFCgMZ"},"_defines":[{}],"_states":[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],"_props":[{"mainColor":{"__type__":"cc.Color","r":65,"g":65,"b":65}}]},[{"__type__":"cc.SceneAsset","scene":{"__id__":1}},{"__type__":"cc.Scene","_children":[{"__id__":2},{"__id__":3},{"__id__":4},{"__id__":5},{"__id__":7},{"__id__":13}],"_globals":{"__type__":"cc.SceneGlobals","ambient":{"__type__":"cc.AmbientInfo"},"planarShadows":{"__type__":"cc.PlanarShadowInfo"},"_skybox":{"__type__":"cc.SkyboxInfo"}}},{"__type__":"cc.Node","_name":"Main Light","_parent":{"__id__":1},"_components":[{"__type__":"cc.DirectionalLightComponent","node":{"__id__":2},"_staticSettings":{"__type__":"cc.StaticLightSettings"}}],"_lrot":{"__type__":"cc.Quat","x":-0.24999999999999997,"y":-0.24999999999999997,"z":-0.06698729810778066,"w":0.9330127018922194},"_euler":{"__type__":"cc.Vec3","x":-30,"y":-30},"_id":"c0y6F5f+pAvI805TdmxIjx"},{"__type__":"cc.Node","_name":"Camera","_parent":{"__id__":1},"_components":[{"__type__":"cc.CameraComponent","_name":"Camera<CameraComponent>","node":{"__id__":3},"_projection":0,"_visibility":1822425087},{"__type__":"880b4w+I/RN1adeszn5EeG2","_name":"Camera<first-person-camera>","node":{"__id__":3},"ground":{"__id__":4},"moveSpeed":0.2,"minOrtheHeight":5,"panMaxPosition":{"__type__":"cc.Vec3","x":60,"y":60},"panMinPosition":{"__type__":"cc.Vec3","x":-60,"y":-60},"damp":0.1}],"_lpos":{"__type__":"cc.Vec3","x":138.54387994626083,"y":53.88553180185918,"z":104.58384078008704},"_lrot":{"__type__":"cc.Quat","x":-0.22346784263725725,"y":0.43289795285854793,"z":0.11169040792522274,"w":0.8661332105810902},"_euler":{"__type__":"cc.Vec3","x":-28.934335761570757,"y":53.11225045674046,"z":1.5902773407317584e-15},"_id":"c9DMICJLFO5IeO07EPon7U"},{"__type__":"cc.Node","_name":"Ground","_parent":{"__id__":1},"_components":[{"__type__":"cc.ModelComponent","_name":"Quad<ModelComponent>","node":{"__id__":4},"_enabled":false,"_materials":[{"__uuid__":"50kb6hTDxO57pi7/I94vu+"}],"lightmapSettings":{"__type__":"cc.ModelLightmapSettings"},"_mesh":{"__uuid__":"12Y9dMgWdJKJGmTiZyQR9H@fc873"}},{"__type__":"cc.BoxColliderComponent","node":{"__id__":4},"_size":{"__type__":"cc.Vec3","x":1,"y":1,"z":0.001}}],"_lrot":{"__type__":"cc.Quat","x":-0.7071067811865475,"w":0.7071067811865476},"_lscale":{"__type__":"cc.Vec3","x":200,"y":200,"z":1},"_euler":{"__type__":"cc.Vec3","x":-90},"_id":"03VRifCqdHZrrjYFz7SXgH"},{"__type__":"cc.Node","_name":"GameManager","_parent":{"__id__":1},"_components":[{"__type__":"3c34cCllvlGCIKOWNIuqna3","node":{"__id__":5},"playerCtrl":{"__id__":6},"customerPrfb":{"__uuid__":"cb3ayGnMZOpLkNcz37Gc4p"},"customerCount":1000}],"_id":"42mx8iXBBMMpqJDmQHeAwc"},{"__type__":"c81a3oMr4BAqptDZXHT+JXH","node":{"__id__":7},"rangeIndicatorPrfb":{"__uuid__":"4fy9/cOXFB2ZGzRWYpQU63"},"advertisementPrfb":{"__uuid__":"837FXm5BxOQq4GdkzJ6zCY"},"customMoneyTips":{"__id__":8},"customProductionPriceTips":{"__id__":33},"customProductionCountTips":{"__id__":26}},{"__type__":"cc.Node","_name":"PlayerController","_parent":{"__id__":1},"_components":[{"__id__":6}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":7},"fileId":"6e6Pqw7d1Ak5X3575TS5q/","_synced":{"default":false,"serializable":false}},"_id":"6e6Pqw7d1Ak5X3575TS5q/"},{"__type__":"cc.LabelComponent","node":{"__id__":9},"_string":"1000","_horizontalAlign":0,"_actualFontSize":20,"_fontSize":20,"_lineHeight":20},{"__type__":"cc.Node","_name":"value","_parent":{"__id__":10},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":9},"_contentSize":{"__type__":"cc.Size","width":44.49,"height":25.2}},{"__id__":8},{"__type__":"cc.WidgetComponent","_name":"value<WidgetComponent>","node":{"__id__":9},"_alignFlags":12}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"77+tzLXWlPy7Pde9wGJEbv","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-27.755,"y":-17.4},"_layer":33554432},{"__type__":"cc.Node","_name":"playerInfo","_parent":{"__id__":11},"_children":[{"__id__":44},{"__id__":9}],"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":10},"_contentSize":{"__type__":"cc.Size","width":100,"height":60}},{"__type__":"cc.WidgetComponent","_name":"playerInfo<WidgetComponent>","node":{"__id__":10},"_alignFlags":32}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"b5WUQ1AwNH/LuMRmzfiQN/","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":50}},{"__type__":"cc.Node","_name":"player","_parent":{"__id__":12},"_children":[{"__id__":43},{"__id__":10}],"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":11},"_contentSize":{"__type__":"cc.Size","width":200,"height":60}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"505vK0TSJDza74YTgthiFt","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-380}},{"__type__":"cc.Node","_name":"BottomUI","_parent":{"__id__":13},"_children":[{"__id__":11},{"__id__":21},{"__id__":29},{"__id__":37},{"__id__":39},{"__id__":41}],"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":12},"_contentSize":{"__type__":"cc.Size","width":960,"height":60}},{"__type__":"cc.LayoutComponent","node":{"__id__":12},"_N$layoutType":1,"_spacingX":5},{"__type__":"cc.WidgetComponent","_name":"Layout<WidgetComponent>","node":{"__id__":12},"_alignFlags":44,"_originalWidth":100},{"__type__":"cc.BlockInputEventsComponent","node":{"__id__":12}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"f1GSOXSjxDnp7qlAqQxyN8","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","y":-290},"_layer":33554432},{"__type__":"cc.Node","_name":"Canvas","_parent":{"__id__":1},"_children":[{"__id__":14},{"__id__":12}],"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":13},"_contentSize":{"__type__":"cc.Size","width":960,"height":640}},{"__type__":"cc.CanvasComponent","node":{"__id__":13}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"8drBGajTpHNYOZPstIDlpw","_synced":{}},"_lpos":{"__type__":"cc.Vec3","x":480,"y":320,"z":1},"_id":"bezE529m9EOKei2aV/kOPa"},{"__type__":"cc.Node","_name":"TopUI","_parent":{"__id__":13},"_children":[{"__id__":15},{"__id__":16}],"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":14},"_contentSize":{"__type__":"cc.Size","width":960,"height":50}},{"__type__":"cc.WidgetComponent","_name":"TopUI<WidgetComponent>","node":{"__id__":14},"_alignFlags":41,"_bottom":270,"_originalWidth":100},{"__type__":"cc.BlockInputEventsComponent","node":{"__id__":14}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"6d8/VxV/ZCoIoyz4XnBZZA","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","y":295}},{"__type__":"cc.Node","_name":"Tips","_parent":{"__id__":14},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":15},"_contentSize":{"__type__":"cc.Size","width":82.28,"height":50.4}},{"__type__":"cc.LabelComponent","node":{"__id__":15},"_string":"Addiction","_actualFontSize":20,"_fontSize":20},{"__type__":"cc.WidgetComponent","_name":"Tips<WidgetComponent>","node":{"__id__":15},"_alignFlags":8,"_left":79.99}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"30DydIWYZEzaT6EhGXd/E3","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-358.87},"_layer":33554432},{"__type__":"cc.Node","_name":"ProgressBar","_parent":{"__id__":14},"_children":[{"__id__":17},{"__id__":19}],"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":16},"_contentSize":{"__type__":"cc.Size","width":600,"height":15}},{"__type__":"cc.SpriteComponent","node":{"__id__":16},"_spriteFrame":{"__uuid__":"9f2QDdIhtPiY8s+6NCQ8g1@f9941"},"_type":1,"_sizeMode":0},{"__type__":"cc.ProgressBarComponent","node":{"__id__":16},"_barSprite":{"__id__":18},"_totalLength":600,"_progress":0.5},{"__type__":"cc.SliderComponent","node":{"__id__":16},"_handle":{"__id__":20},"_progress":0.5}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"48TMDGYgNCMJMG7gxLyTKv","_synced":{"default":false,"serializable":false}},"_layer":33554432},{"__type__":"cc.Node","_name":"Bar","_parent":{"__id__":16},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":17},"_contentSize":{"__type__":"cc.Size","width":300,"height":15},"_anchorPoint":{"__type__":"cc.Vec2","y":0.5}},{"__id__":18}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"e1mW1TM+RNm6AT2NCBFl1v","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-300},"_layer":33554432},{"__type__":"cc.SpriteComponent","node":{"__id__":17},"_color":{"__type__":"cc.Color","r":114},"_spriteFrame":{"__uuid__":"24pwTaKGdEbY0aXpIMdeCd@f9941"},"_type":1,"_sizeMode":0},{"__type__":"cc.Node","_name":"Handle","_parent":{"__id__":16},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":19},"_contentSize":{"__type__":"cc.Size","width":32,"height":32}},{"__id__":20}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"b7NiseAu1A/5PtV4n6uXi8","_synced":{"default":false,"serializable":false}},"_layer":33554432},{"__type__":"cc.SpriteComponent","node":{"__id__":19},"_color":{"__type__":"cc.Color","r":255},"_sharedMaterial":{"__uuid__":"fdoJXLgx1GAa2UhGATlj3o"},"_spriteFrame":{"__uuid__":"eaPuOqfYdJpaa9FolSks0y@f9941"},"_sizeMode":0},{"__type__":"cc.Node","_name":"productionNum","_parent":{"__id__":12},"_children":[{"__id__":22},{"__id__":23},{"__id__":27}],"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":21},"_contentSize":{"__type__":"cc.Size","width":300,"height":60}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"b92WXZlRlKeaaeyrvwXkqz","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-125}},{"__type__":"cc.Node","_name":"Img","_parent":{"__id__":21},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":22},"_contentSize":{"__type__":"cc.Size","width":60,"height":60}},{"__type__":"cc.SpriteComponent","node":{"__id__":22},"_spriteFrame":{"__uuid__":"c4Xey62RpD9Ih/aWrdRRm7@f9941"},"_sizeMode":0},{"__type__":"cc.WidgetComponent","_name":"Img<WidgetComponent>","node":{"__id__":22},"_alignFlags":8,"_left":20}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"5bIBSLG0pKsZgTkT/GbEqa","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-100},"_layer":33554432},{"__type__":"cc.Node","_name":"Num","_parent":{"__id__":21},"_children":[{"__id__":24},{"__id__":25}],"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":23},"_contentSize":{"__type__":"cc.Size","width":100,"height":60}},{"__type__":"cc.WidgetComponent","_name":"Num<WidgetComponent>","node":{"__id__":23},"_alignFlags":16}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"9cnojN8glPaIZgWHCZzvuB","_synced":{"default":false,"serializable":false}}},{"__type__":"cc.Node","_name":"tips","_parent":{"__id__":23},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":24},"_contentSize":{"__type__":"cc.Size","width":60,"height":25.2},"_anchorPoint":{"__type__":"cc.Vec2"}},{"__type__":"cc.LabelComponent","node":{"__id__":24},"_string":"库存：","_horizontalAlign":0,"_actualFontSize":20,"_fontSize":20,"_lineHeight":20},{"__type__":"cc.WidgetComponent","_name":"tips<WidgetComponent>","node":{"__id__":24},"_alignFlags":9}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"45eNO9c/JOOqgI1/FVyMFq","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-50,"y":4.800000000000001},"_layer":33554432},{"__type__":"cc.Node","_name":"value","_parent":{"__id__":23},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":25},"_contentSize":{"__type__":"cc.Size","width":11.12,"height":25.2},"_anchorPoint":{"__type__":"cc.Vec2","y":1}},{"__id__":26},{"__type__":"cc.WidgetComponent","_name":"value<WidgetComponent>","node":{"__id__":25},"_alignFlags":12,"_top":50,"_originalHeight":50.4}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"16HZc5szdPSpabusL18+dT","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-50,"y":-4.800000000000001},"_layer":33554432},{"__type__":"cc.LabelComponent","node":{"__id__":25},"_string":"0","_horizontalAlign":0,"_actualFontSize":20,"_fontSize":20,"_lineHeight":20},{"__type__":"cc.Node","_name":"changeBtm","_parent":{"__id__":21},"_children":[{"__id__":28}],"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":27},"_contentSize":{"__type__":"cc.Size","width":100,"height":60}},{"__type__":"cc.WidgetComponent","_name":"changeBtm<WidgetComponent>","node":{"__id__":27},"_alignFlags":32}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"b8DW6wz1pG1rJhmdCI3Gma","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":100}},{"__type__":"cc.Node","_name":"add","_parent":{"__id__":27},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":28},"_contentSize":{"__type__":"cc.Size","width":50,"height":50}},{"__type__":"cc.SpriteComponent","node":{"__id__":28},"_spriteFrame":{"__uuid__":"ddvcmc5nlKJaHJUhuk0wXR@f9941"},"_type":1,"_sizeMode":0},{"__type__":"cc.ButtonComponent","node":{"__id__":28},"clickEvents":[{"__type__":"cc.ClickEvent","target":{"__id__":7},"_componentId":"c81a3oMr4BAqptDZXHT+JXH","handler":"addProduction"}],"_transition":3,"_normalSprite":{"__uuid__":"20g1ukYUVPvKWKBRznAKo+@f9941"},"_hoverSprite":{"__uuid__":"20g1ukYUVPvKWKBRznAKo+@f9941"},"_pressedSprite":{"__uuid__":"54TknWPwVPqJqeCR+Y/Czo@f9941"},"_disabledSprite":{"__uuid__":"95EkngnxZFbYuFpsqVTaFr@f9941"},"_target":{"__id__":28}},{"__type__":"cc.WidgetComponent","_name":"add<WidgetComponent>","node":{"__id__":28},"_alignFlags":10,"_left":-10}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"6eNtGw6uZCHJM6sl2OTu/c","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-35},"_layer":33554432},{"__type__":"cc.Node","_name":"productionPrice","_parent":{"__id__":12},"_children":[{"__id__":30},{"__id__":34}],"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":29},"_contentSize":{"__type__":"cc.Size","width":220,"height":60}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"1eHxG4RXdLV4Kn3wSAjLwJ","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":140}},{"__type__":"cc.Node","_name":"Num","_parent":{"__id__":29},"_children":[{"__id__":31},{"__id__":32}],"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":30},"_contentSize":{"__type__":"cc.Size","width":100,"height":60}},{"__type__":"cc.WidgetComponent","_name":"Num<WidgetComponent>","node":{"__id__":30},"_alignFlags":8,"_isAbsLeft":false}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"4bIsv8W1dDlp/unPqPZpIC","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-60}},{"__type__":"cc.Node","_name":"tips","_parent":{"__id__":30},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":31},"_contentSize":{"__type__":"cc.Size","width":60,"height":25.2},"_anchorPoint":{"__type__":"cc.Vec2"}},{"__type__":"cc.LabelComponent","node":{"__id__":31},"_string":"单价：","_horizontalAlign":0,"_actualFontSize":20,"_fontSize":20,"_lineHeight":20},{"__type__":"cc.WidgetComponent","_name":"tips<WidgetComponent>","node":{"__id__":31},"_alignFlags":9}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"ba43IHvsZKGpVmUPgKPlda","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-50,"y":4.800000000000001},"_layer":33554432},{"__type__":"cc.Node","_name":"value","_parent":{"__id__":30},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":32},"_contentSize":{"__type__":"cc.Size","width":11.12,"height":18.9},"_anchorPoint":{"__type__":"cc.Vec2","y":1}},{"__id__":33},{"__type__":"cc.WidgetComponent","_name":"value<WidgetComponent>","node":{"__id__":32},"_alignFlags":12}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"7cIo0rvrJF7ZLip5Xhy1d4","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-50,"y":-11.100000000000001},"_layer":33554432},{"__type__":"cc.LabelComponent","node":{"__id__":32},"_string":"0","_horizontalAlign":0,"_actualFontSize":20,"_fontSize":20,"_lineHeight":15},{"__type__":"cc.Node","_name":"changeBtm","_parent":{"__id__":29},"_children":[{"__id__":35},{"__id__":36}],"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":34},"_contentSize":{"__type__":"cc.Size","width":100,"height":60}},{"__type__":"cc.WidgetComponent","_name":"changeBtm<WidgetComponent>","node":{"__id__":34},"_alignFlags":32,"_right":-1}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"77bJIM5sRNiqoz5jcV76Zf","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":61}},{"__type__":"cc.Node","_name":"add","_parent":{"__id__":34},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":35},"_contentSize":{"__type__":"cc.Size","width":50,"height":50}},{"__type__":"cc.SpriteComponent","node":{"__id__":35},"_spriteFrame":{"__uuid__":"ddvcmc5nlKJaHJUhuk0wXR@f9941"},"_type":1,"_sizeMode":0},{"__type__":"cc.ButtonComponent","node":{"__id__":35},"clickEvents":[{"__type__":"cc.ClickEvent","target":{"__id__":7},"_componentId":"c81a3oMr4BAqptDZXHT+JXH","handler":"addPrice"}],"_transition":3,"_normalSprite":{"__uuid__":"20g1ukYUVPvKWKBRznAKo+@f9941"},"_hoverSprite":{"__uuid__":"20g1ukYUVPvKWKBRznAKo+@f9941"},"_pressedSprite":{"__uuid__":"54TknWPwVPqJqeCR+Y/Czo@f9941"},"_disabledSprite":{"__uuid__":"95EkngnxZFbYuFpsqVTaFr@f9941"},"_target":{"__id__":35}},{"__type__":"cc.WidgetComponent","_name":"add<WidgetComponent>","node":{"__id__":35},"_alignFlags":10,"_left":-10,"_top":5}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"37Cu18QVRACKQIJnvMXGY+","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-35},"_layer":33554432},{"__type__":"cc.Node","_name":"sub","_parent":{"__id__":34},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":36},"_contentSize":{"__type__":"cc.Size","width":50,"height":50}},{"__type__":"cc.SpriteComponent","node":{"__id__":36},"_spriteFrame":{"__uuid__":"e68gNYYddJJq9GK9jCQ9ww@f9941"},"_type":1,"_sizeMode":0},{"__type__":"cc.ButtonComponent","node":{"__id__":36},"clickEvents":[{"__type__":"cc.ClickEvent","target":{"__id__":7},"_componentId":"c81a3oMr4BAqptDZXHT+JXH","handler":"subPrice"}],"_transition":3,"_normalSprite":{"__uuid__":"20g1ukYUVPvKWKBRznAKo+@f9941"},"_hoverSprite":{"__uuid__":"20g1ukYUVPvKWKBRznAKo+@f9941"},"_pressedSprite":{"__uuid__":"54TknWPwVPqJqeCR+Y/Czo@f9941"},"_disabledSprite":{"__uuid__":"95EkngnxZFbYuFpsqVTaFr@f9941"},"_target":{"__id__":36}},{"__type__":"cc.WidgetComponent","_name":"sub<WidgetComponent>","node":{"__id__":36},"_alignFlags":34}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"4ev/8G89ZJkqKujBUt7Ecr","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":25},"_layer":33554432},{"__type__":"cc.Node","_name":"AD_1","_parent":{"__id__":12},"_children":[{"__id__":38}],"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":37},"_contentSize":{"__type__":"cc.Size","width":70,"height":60}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"41EWPBV29KsLVpNBQ0FI3S","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":290}},{"__type__":"cc.Node","_name":"Img","_parent":{"__id__":37},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":38},"_contentSize":{"__type__":"cc.Size","width":50,"height":50}},{"__type__":"cc.SpriteComponent","node":{"__id__":38},"_spriteFrame":{"__uuid__":"eem0QAEOFKOKZUHj52123F@f9941"},"_sizeMode":0},{"__type__":"cc.ButtonComponent","node":{"__id__":38},"clickEvents":[{"__type__":"cc.ClickEvent","target":{"__id__":7},"_componentId":"c81a3oMr4BAqptDZXHT+JXH","handler":"onAdButtonClicked","customEventData":"0"}]}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"ff0TFpaxJD1pi2RCpwqNvW","_synced":{"default":false,"serializable":false}},"_layer":33554432},{"__type__":"cc.Node","_name":"AD_2","_parent":{"__id__":12},"_children":[{"__id__":40}],"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":39},"_contentSize":{"__type__":"cc.Size","width":70,"height":60}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"b3UuEPzY5AdoVlaTa7lZ2q","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":365}},{"__type__":"cc.Node","_name":"Img","_parent":{"__id__":39},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":40},"_contentSize":{"__type__":"cc.Size","width":50,"height":50}},{"__type__":"cc.SpriteComponent","node":{"__id__":40},"_spriteFrame":{"__uuid__":"ccJSwSUrJOFYFmhFTarRQz@f9941"},"_sizeMode":0},{"__type__":"cc.ButtonComponent","node":{"__id__":40},"clickEvents":[{"__type__":"cc.ClickEvent","target":{"__id__":7},"_componentId":"c81a3oMr4BAqptDZXHT+JXH","handler":"onAdButtonClicked","customEventData":"1"}]}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"12iEqsVnxHj472WRRYt1f1","_synced":{"default":false,"serializable":false}},"_layer":33554432},{"__type__":"cc.Node","_name":"AD_3","_parent":{"__id__":12},"_children":[{"__id__":42}],"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":41},"_contentSize":{"__type__":"cc.Size","width":70,"height":60}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"cbxntExlRHupjvufu6D62+","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":440}},{"__type__":"cc.Node","_name":"Img","_parent":{"__id__":41},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":42},"_contentSize":{"__type__":"cc.Size","width":50,"height":50}},{"__type__":"cc.SpriteComponent","node":{"__id__":42},"_spriteFrame":{"__uuid__":"82UpApyrdMG70NLojzF1V7@f9941"},"_sizeMode":0},{"__type__":"cc.ButtonComponent","node":{"__id__":42},"clickEvents":[{"__type__":"cc.ClickEvent","target":{"__id__":7},"_componentId":"c81a3oMr4BAqptDZXHT+JXH","handler":"onAdButtonClicked","customEventData":"2"}]}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"9bhTZmGwxGtp7xd+r8OMOy","_synced":{"default":false,"serializable":false}},"_layer":33554432},{"__type__":"cc.Node","_name":"avatar","_parent":{"__id__":11},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":43},"_contentSize":{"__type__":"cc.Size","width":60,"height":60}},{"__type__":"cc.SpriteComponent","node":{"__id__":43},"_spriteFrame":{"__uuid__":"28xuSzDLRL9aofj4164eo4@f9941"},"_sizeMode":0},{"__type__":"cc.WidgetComponent","_name":"avatar<WidgetComponent>","node":{"__id__":43},"_alignFlags":8,"_left":20}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"bf+62Fn9dHKqHZUVCBAYZZ","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-50},"_layer":33554432},{"__type__":"cc.Node","_name":"tips","_parent":{"__id__":10},"_components":[{"__type__":"cc.UITransformComponent","node":{"__id__":44},"_contentSize":{"__type__":"cc.Size","width":60,"height":25.2}},{"__type__":"cc.LabelComponent","node":{"__id__":44},"_string":"资产：","_horizontalAlign":0,"_actualFontSize":20,"_fontSize":20,"_lineHeight":20},{"__type__":"cc.WidgetComponent","_name":"tips<WidgetComponent>","node":{"__id__":44},"_alignFlags":9,"_left":2.7950000000000017}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":13},"fileId":"c71CdOrbdHWbHspPWitpm7","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-17.205,"y":17.4},"_layer":33554432}],{"__type__":"cc.SpriteFrame","content":{"name":"default_btn_normal","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"texture":"20g1ukYUVPvKWKBRznAKo+@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"default_btn_disabled","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"texture":"95EkngnxZFbYuFpsqVTaFr@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"AD3","rect":{"x":2,"y":2,"width":180,"height":180},"offset":{"x":-16.5,"y":8},"originalSize":{"width":217,"height":200},"rotated":false,"capInsets":[0,0,0,0],"texture":"82UpApyrdMG70NLojzF1V7@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"box","rect":{"x":8,"y":8,"width":184,"height":184},"offset":{"x":0,"y":0},"originalSize":{"width":200,"height":200},"rotated":false,"capInsets":[0,0,0,0],"texture":"c4Xey62RpD9Ih/aWrdRRm7@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"AD2","rect":{"x":14,"y":16,"width":174,"height":170},"offset":{"x":1,"y":-1},"originalSize":{"width":200,"height":200},"rotated":false,"capInsets":[0,0,0,0],"texture":"ccJSwSUrJOFYFmhFTarRQz@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"plus","rect":{"x":20,"y":20,"width":64,"height":64},"offset":{"x":2,"y":-2},"originalSize":{"width":100,"height":100},"rotated":false,"capInsets":[0,0,0,0],"texture":"ddvcmc5nlKJaHJUhuk0wXR@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"minus","rect":{"x":20,"y":20,"width":64,"height":64},"offset":{"x":2,"y":-2},"originalSize":{"width":100,"height":100},"rotated":false,"capInsets":[0,0,0,0],"texture":"e68gNYYddJJq9GK9jCQ9ww@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"dead","rect":{"x":12,"y":2,"width":176,"height":196},"offset":{"x":0,"y":0},"originalSize":{"width":200,"height":200},"rotated":false,"capInsets":[0,0,0,0],"texture":"eaPuOqfYdJpaa9FolSks0y@6c48a"}},{"__type__":"cc.SpriteFrame","content":{"name":"AD1","rect":{"x":8,"y":25,"width":184,"height":154},"offset":{"x":0,"y":-2},"originalSize":{"width":200,"height":200},"rotated":false,"capInsets":[0,0,0,0],"texture":"eem0QAEOFKOKZUHj52123F@6c48a"}},{"__type__":"cc.Material","_effectAsset":{"__uuid__":"609xlc7CpF67qUiVX2DoHQ"},"_defines":[{"USE_TEXTURE":true}],"_props":[{}]}]
