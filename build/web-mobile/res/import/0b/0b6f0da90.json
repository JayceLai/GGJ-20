[{"__type__":"cc.EffectAsset","_name":"builtin-standard","techniques":[{"name":"opaque","passes":[{"program":"builtin-standard|standard-vs:vert|standard-fs:frag","properties":{"tilingOffset":{"value":[1,1,0,0],"type":16},"mainColor":{"value":[1,1,1,1],"type":16,"handleInfo":["albedo",0,16]},"albedoScale":{"value":[1,1,1],"type":15,"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"value":[0.5],"type":13,"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"value":[1],"type":13,"handleInfo":["pbrParams",0,13]},"roughness":{"value":[0.8],"type":13,"handleInfo":["pbrParams",1,13]},"metallic":{"value":[0.6],"type":13,"handleInfo":["pbrParams",2,13]},"normalStrenth":{"value":[1],"type":13,"handleInfo":["pbrParams",3,13]},"emissive":{"value":[0,0,0,1],"type":16},"emissiveScale":{"value":[1,1,1],"type":15,"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"pbrParams":{"type":16,"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey"}}}]},{"name":"transparent","passes":[{"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"program":"builtin-standard|standard-vs:vert|standard-fs:frag","depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"value":[1,1,0,0],"type":16},"mainColor":{"value":[1,1,1,1],"type":16,"handleInfo":["albedo",0,16]},"albedoScale":{"value":[1,1,1],"type":15,"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"value":[0.5],"type":13,"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"value":[1],"type":13,"handleInfo":["pbrParams",0,13]},"roughness":{"value":[0.8],"type":13,"handleInfo":["pbrParams",1,13]},"metallic":{"value":[0.6],"type":13,"handleInfo":["pbrParams",2,13]},"normalStrenth":{"value":[1],"type":13,"handleInfo":["pbrParams",3,13]},"emissive":{"value":[0,0,0,1],"type":16},"emissiveScale":{"value":[1,1,1],"type":15,"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"pbrParams":{"type":16,"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey"}}}]}],"shaders":[{"hash":433041798,"glsl3":{"vert":"\nprecision highp float;\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n        return int(a_vertexId);\n    }\nuniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n};\n    vec4 fetchFlatPixel(sampler2D tex, int pixelIndex) {\n        float pixelIndexF = float(pixelIndex);\n        vec2 textureResolution = vec2(float(cc_displacementTextureInfo.x), float(cc_displacementTextureInfo.y));\n        float pixelX = mod(pixelIndexF, textureResolution.x);\n        float pixelY = floor(pixelIndexF / textureResolution.x);\n        vec2 uv = (vec2(pixelX, pixelY) + .5) / textureResolution;\n        return texture(tex, uv);\n    }\nfloat getDisplacementWeight(int index) {\n    float m = mod(float(index), 4.0);\n    if (m < 1.0) {\n        return cc_displacementWeights[index / 4].x;\n    } else if (m < 2.0) {\n        return cc_displacementWeights[index / 4].y;\n    } else if (m < 3.0) {\n        return cc_displacementWeights[index / 4].z;\n    } else {\n        return cc_displacementWeights[index / 4].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchFlatPixel(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        int dataPixelStart = int(fetchFlatPixel(tex, iTarget).r);\n        result += (fetchFlatPixel(tex, dataPixelStart + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nin vec4 a_weights;\nin vec4 a_joints;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - step(127.99, rgba[3]) * 2.0;\n  highp float Exponent = 2.0 * mod(rgba[3], 127.99) + step(128.0, rgba[2]) - 127.0;\n  highp float Mantissa = mod(rgba[2], 128.0) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  uniform CCSkinningTexture {\n    highp vec4 cc_jointTextureInfo;\n  };\n  uniform CCSkinningAnimation {\n    highp vec4 cc_jointAnimInfo;\n  };\n  uniform sampler2D cc_jointTexture;\n  #else\n  uniform CCSkinning {\n    highp vec4 cc_joints[30 * 3];\n  };\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  return getJointMatrix(a_joints.x) * a_weights.x\n       + getJointMatrix(a_joints.y) * a_weights.y\n       + getJointMatrix(a_joints.z) * a_weights.z\n       + getJointMatrix(a_joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n#if USE_LIGHTMAP\n  in vec4 a_lightingMapUVParam;\n#endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\nuniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\n#endif\nuniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\n#if USE_VERTEX_COLOR\n  in vec3 a_color;\n  out vec3 v_color;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\nin vec2 a_texCoord;\nout vec2 v_uv;\nin vec2 a_texCoord1;\nout vec2 v_uv1;\n#if USE_LIGHTMAP && !USE_BATCHING\n  out vec2 v_luv;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  #if USE_LIGHTMAP && HAS_SECOND_UV && !USE_BATCHING && !USE_INSTANCING\n    v_luv = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n  #endif\n  #if USE_LIGHTMAP && HAS_SECOND_UV && !USE_BATCHING && USE_INSTANCING\n    v_luv = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n  #endif\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\n#if CC_USE_IBL\nuniform samplerCube cc_environment;\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\n#endif\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform CCForwardLight {\n  highp vec4 cc_sphereLitPos[2];\n  vec4 cc_sphereLitSizeRange[2];\n  vec4 cc_sphereLitColor[2];\n  highp vec4 cc_spotLitPos[2];\n  vec4 cc_spotLitSizeRangeAngle[2];\n  vec4 cc_spotLitDir[2];\n  vec4 cc_spotLitColor[2];\n};\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n  float factor = distSqr * invSqrAttRadius;\n  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n  return smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\n  float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n  return attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n  float cd = dot(litDir, L);\n  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n  return (attenuation * attenuation);\n}\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness*0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min( r.x * r.x, exp2( -9.28 * NoV ) ) * r.x + r.y;\n  vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\nvec3 CalcDynamicLighting (vec3 worldPos, vec3 N, vec3 V, vec3 diffuse, vec3 specular, float roughness) {\n  vec3 lighting = vec3(0.0);\n  vec3 diffuseContrib = diffuse / 3.14159265359;\n  for (int i = 0; i < 2; i++) {\n    vec3 PLU = cc_sphereLitPos[i].xyz - worldPos;\n    vec3 PL = normalize(PLU);\n    vec3 PH = normalize(PL + V);\n    float PNL = max(dot(N, PL), 0.001);\n    float PNH = max(dot(N, PH), 0.0);\n    float distSqr = dot(PLU, PLU);\n    float litRadius = cc_sphereLitSizeRange[i].x;\n    float litRadiusSqr = litRadius * litRadius;\n    float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n    float attRadiusSqrInv = 1.0 / max(cc_sphereLitSizeRange[i].y, 0.01);\n    attRadiusSqrInv *= attRadiusSqrInv;\n    float att = GetDistAtt(distSqr, attRadiusSqrInv);\n    vec3 lspec = specular * CalcSpecular(roughness, PNH, PH, N);\n    lighting += PNL * cc_sphereLitColor[i].rgb * cc_sphereLitColor[i].w * illum * att * (diffuseContrib + lspec);\n  }\n  for (int i = 0; i < 2; i++) {\n    vec3 SLU = cc_spotLitPos[i].xyz - worldPos;\n    vec3 SL = normalize(SLU);\n    vec3 SH = normalize(SL + V);\n    float SNL = max(dot(N, SL), 0.001);\n    float SNH = max(dot(N, SH), 0.0);\n    float distSqr = dot(SLU, SLU);\n    float litRadius = cc_spotLitSizeRangeAngle[i].x;\n    float litRadiusSqr = litRadius * litRadius;\n    float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n    float attRadiusSqrInv = 1.0 / max(cc_spotLitSizeRangeAngle[i].y, 0.01);\n    attRadiusSqrInv *= attRadiusSqrInv;\n    float cosInner = max(dot(-cc_spotLitDir[i].xyz, SL), 0.01);\n    float cosOuter = cc_spotLitSizeRangeAngle[i].z;\n    float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n    float litAngleOffset = -cosOuter * litAngleScale;\n    float att = GetDistAtt(distSqr, attRadiusSqrInv);\n    att *= GetAngleAtt(SL, -cc_spotLitDir[i].xyz, litAngleScale, litAngleOffset);\n    vec3 lspec = specular * CalcSpecular(roughness, SNH, SH, N);\n    lighting += SNL * cc_spotLitColor[i].rgb * cc_spotLitColor[i].w * illum * att * (diffuseContrib + lspec);\n  }\n  return lighting;\n}\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShading (StandardSurface s) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - s.position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L+V);\n  float NV = max(abs(dot(N, V)), 0.001);\n  float NL = max(dot(N, L), 0.001);\n  float NH = max(dot(N, H), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 diffuseContrib = diffuse / 3.14159265359;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w * (diffuseContrib + specularContrib);\n  finalColor += CalcDynamicLighting(s.position, N, V, diffuse, specular, s.roughness);\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n  finalColor += (ambDiff.rgb * diffuse);\n  #if CC_USE_IBL\n    vec3 R = normalize(reflect(-V, N));\n    vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n    #if CC_USE_IBL == 2\n      vec3 env = unpackRGBE(envmap);\n    #else\n      vec3 env = SRGBToLinear(envmap.rgb);\n    #endif\n    finalColor += env * cc_ambientSky.w * specular;\n  #endif\n  finalColor = finalColor * s.occlusion;\n  #if CC_USE_HDR\n    s.emissive *= cc_exposure.w;\n  #endif\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nuniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nin vec3 v_position;\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec3 v_normal;\n#if USE_VERTEX_COLOR\n  in vec3 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_LIGHTMAP\n  in vec2 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= v_color;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * pbrParams.w) * normalize(v_tangent) +\n      (nmmp.y * pbrParams.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.OCCLUSION_CHANNEL;\n    pbr.y *= res.ROUGHNESS_CHANNEL;\n    pbr.z *= res.METALLIC_CHANNEL;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, METALLIC_ROUGHNESS_UV);\n    pbr.z *= metallicRoughness.METALLIC_CHANNEL;\n    pbr.y *= metallicRoughness.ROUGHNESS_CHANNEL;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, OCCLUSION_UV).OCCLUSION_CHANNEL;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\nvec4 frag () {\n  StandardSurface s; surf(s);\n  vec4 color = CCStandardShading(s);\n  #if USE_LIGHTMAP && !USE_BATCHING\n    vec4 lighting = texture(cc_lightingMap, v_luv);\n    float fAmb = 0.5 - s.normal.y * 0.5;\n    vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 finalColor = (ambDiff.rgb * diffuse);\n    finalColor += lighting.rgb * diffuse;\n    finalColor = finalColor * s.occlusion;\n    finalColor += s.emissive;\n    color.rgb = lighting.a * finalColor + (1.0 - lighting.a) * color.rgb;\n  #endif\n  return CCFragOutput(color);\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n        return int(a_vertexId);\n    }\nuniform vec4 cc_displacementWeights[15];\nuniform vec4 cc_displacementTextureInfo;\n    vec4 fetchFlatPixel(sampler2D tex, int pixelIndex) {\n        float pixelIndexF = float(pixelIndex);\n        vec2 textureResolution = vec2(float(cc_displacementTextureInfo.x), float(cc_displacementTextureInfo.y));\n        float pixelX = mod(pixelIndexF, textureResolution.x);\n        float pixelY = floor(pixelIndexF / textureResolution.x);\n        vec2 uv = (vec2(pixelX, pixelY) + .5) / textureResolution;\n        return texture2D(tex, uv);\n    }\nfloat getDisplacementWeight(int index) {\n    float m = mod(float(index), 4.0);\n    if (m < 1.0) {\n        return cc_displacementWeights[index / 4].x;\n    } else if (m < 2.0) {\n        return cc_displacementWeights[index / 4].y;\n    } else if (m < 3.0) {\n        return cc_displacementWeights[index / 4].z;\n    } else {\n        return cc_displacementWeights[index / 4].w;\n    }\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\n    return fetchFlatPixel(tex, vertexIndex).rgb;\n#else\n    vec3 result = vec3(0, 0, 0);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n        int dataPixelStart = int(fetchFlatPixel(tex, iTarget).r);\n        result += (fetchFlatPixel(tex, dataPixelStart + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n        return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nattribute vec4 a_weights;\nattribute vec4 a_joints;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - step(127.99, rgba[3]) * 2.0;\n  highp float Exponent = 2.0 * mod(rgba[3], 127.99) + step(128.0, rgba[2]) - 127.0;\n  highp float Mantissa = mod(rgba[2], 128.0) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_BAKED_ANIMATION\n  #if USE_INSTANCING\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  uniform highp vec4 cc_jointTextureInfo;\n  uniform highp vec4 cc_jointAnimInfo;\n  uniform sampler2D cc_jointTexture;\n  #else\n  uniform highp vec4 cc_joints[90];\n#endif\n#if CC_USE_BAKED_ANIMATION\n  #if CC_SUPPORT_FLOAT_TEXTURE\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n      vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n      vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #else\n    mat4 getJointMatrix (float i) {\n    #if USE_INSTANCING\n      highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n    #else\n      highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n    #endif\n    highp float invSize = cc_jointTextureInfo.w;\n    highp float y = floor(j * invSize);\n    highp float x = j - y * cc_jointTextureInfo.x;\n    y = (y + 0.5) * invSize;\n      vec4 v1 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n      );\n      vec4 v2 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n      );\n      vec4 v3 = vec4(\n        decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n        decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n      );\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n#else\n  mat4 getJointMatrix (float i) {\n    int idx = int(i);\n    vec4 v1 = cc_joints[idx * 3];\n    vec4 v2 = cc_joints[idx * 3 + 1];\n    vec4 v3 = cc_joints[idx * 3 + 2];\n    return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n  }\n#endif\nmat4 skinMatrix () {\n  return getJointMatrix(a_joints.x) * a_weights.x\n       + getJointMatrix(a_joints.y) * a_weights.y\n       + getJointMatrix(a_joints.z) * a_weights.z\n       + getJointMatrix(a_joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\n  mat4 m = skinMatrix();\n  position = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\n  mat4 m = skinMatrix();\n  attr.position = m * attr.position;\n  attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n  attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nuniform highp mat4 cc_matView;\nuniform highp mat4 cc_matProj;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n#if USE_LIGHTMAP\n  attribute vec4 a_lightingMapUVParam;\n#endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\nuniform highp mat4 cc_matWorld;\nuniform highp mat4 cc_matWorldIT;\nuniform highp vec4 cc_lightingMapUVParam;\n#endif\nuniform vec4 tilingOffset;\n#if USE_VERTEX_COLOR\n  attribute vec3 a_color;\n  varying vec3 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\nattribute vec2 a_texCoord;\nvarying vec2 v_uv;\nattribute vec2 a_texCoord1;\nvarying vec2 v_uv1;\n#if USE_LIGHTMAP && !USE_BATCHING\n  varying vec2 v_luv;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n  In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n  mat4 matWorld, matWorldIT;\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  #if USE_LIGHTMAP && HAS_SECOND_UV && !USE_BATCHING && !USE_INSTANCING\n    v_luv = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n  #endif\n  #if USE_LIGHTMAP && HAS_SECOND_UV && !USE_BATCHING && USE_INSTANCING\n    v_luv = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n  #endif\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\n  #ifdef GL_EXT_shader_texture_lod\n    #extension GL_EXT_shader_texture_lod : enable\n  #endif\nprecision highp float;\nuniform highp vec4 cc_cameraPos;\nuniform mediump vec4 cc_exposure;\nuniform mediump vec4 cc_mainLitDir;\nuniform mediump vec4 cc_mainLitColor;\nuniform mediump vec4 cc_ambientSky;\nuniform mediump vec4 cc_ambientGround;\n#if CC_USE_IBL\nuniform samplerCube cc_environment;\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    #ifdef GL_EXT_shader_texture_lod\n      return texture2DLodEXT(tex, coord, lod);\n    #else\n      return texture2D(tex, coord, lod);\n    #endif\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    #ifdef GL_EXT_shader_texture_lod\n      return textureCubeLodEXT(tex, coord, lod);\n    #else\n      return textureCube(tex, coord, lod);\n    #endif\n}\n#endif\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform highp vec4 cc_sphereLitPos[2];\nuniform vec4 cc_sphereLitSizeRange[2];\nuniform vec4 cc_sphereLitColor[2];\nuniform highp vec4 cc_spotLitPos[2];\nuniform vec4 cc_spotLitSizeRangeAngle[2];\nuniform vec4 cc_spotLitDir[2];\nuniform vec4 cc_spotLitColor[2];\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n  float factor = distSqr * invSqrAttRadius;\n  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n  return smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\n  float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n  return attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n  float cd = dot(litDir, L);\n  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n  return (attenuation * attenuation);\n}\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness*0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min( r.x * r.x, exp2( -9.28 * NoV ) ) * r.x + r.y;\n  vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\nvec3 CalcDynamicLighting (vec3 worldPos, vec3 N, vec3 V, vec3 diffuse, vec3 specular, float roughness) {\n  vec3 lighting = vec3(0.0);\n  vec3 diffuseContrib = diffuse / 3.14159265359;\n  for (int i = 0; i < 2; i++) {\n    vec3 PLU = cc_sphereLitPos[i].xyz - worldPos;\n    vec3 PL = normalize(PLU);\n    vec3 PH = normalize(PL + V);\n    float PNL = max(dot(N, PL), 0.001);\n    float PNH = max(dot(N, PH), 0.0);\n    float distSqr = dot(PLU, PLU);\n    float litRadius = cc_sphereLitSizeRange[i].x;\n    float litRadiusSqr = litRadius * litRadius;\n    float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n    float attRadiusSqrInv = 1.0 / max(cc_sphereLitSizeRange[i].y, 0.01);\n    attRadiusSqrInv *= attRadiusSqrInv;\n    float att = GetDistAtt(distSqr, attRadiusSqrInv);\n    vec3 lspec = specular * CalcSpecular(roughness, PNH, PH, N);\n    lighting += PNL * cc_sphereLitColor[i].rgb * cc_sphereLitColor[i].w * illum * att * (diffuseContrib + lspec);\n  }\n  for (int i = 0; i < 2; i++) {\n    vec3 SLU = cc_spotLitPos[i].xyz - worldPos;\n    vec3 SL = normalize(SLU);\n    vec3 SH = normalize(SL + V);\n    float SNL = max(dot(N, SL), 0.001);\n    float SNH = max(dot(N, SH), 0.0);\n    float distSqr = dot(SLU, SLU);\n    float litRadius = cc_spotLitSizeRangeAngle[i].x;\n    float litRadiusSqr = litRadius * litRadius;\n    float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n    float attRadiusSqrInv = 1.0 / max(cc_spotLitSizeRangeAngle[i].y, 0.01);\n    attRadiusSqrInv *= attRadiusSqrInv;\n    float cosInner = max(dot(-cc_spotLitDir[i].xyz, SL), 0.01);\n    float cosOuter = cc_spotLitSizeRangeAngle[i].z;\n    float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n    float litAngleOffset = -cosOuter * litAngleScale;\n    float att = GetDistAtt(distSqr, attRadiusSqrInv);\n    att *= GetAngleAtt(SL, -cc_spotLitDir[i].xyz, litAngleScale, litAngleOffset);\n    vec3 lspec = specular * CalcSpecular(roughness, SNH, SH, N);\n    lighting += SNL * cc_spotLitColor[i].rgb * cc_spotLitColor[i].w * illum * att * (diffuseContrib + lspec);\n  }\n  return lighting;\n}\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShading (StandardSurface s) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - s.position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L+V);\n  float NV = max(abs(dot(N, V)), 0.001);\n  float NL = max(dot(N, L), 0.001);\n  float NH = max(dot(N, H), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 diffuseContrib = diffuse / 3.14159265359;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w * (diffuseContrib + specularContrib);\n  finalColor += CalcDynamicLighting(s.position, N, V, diffuse, specular, s.roughness);\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n  finalColor += (ambDiff.rgb * diffuse);\n  #if CC_USE_IBL\n    vec3 R = normalize(reflect(-V, N));\n    vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n    #if CC_USE_IBL == 2\n      vec3 env = unpackRGBE(envmap);\n    #else\n      vec3 env = SRGBToLinear(envmap.rgb);\n    #endif\n    finalColor += env * cc_ambientSky.w * specular;\n  #endif\n  finalColor = finalColor * s.occlusion;\n  #if CC_USE_HDR\n    s.emissive *= cc_exposure.w;\n  #endif\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nuniform vec4 albedo;\nuniform vec4 albedoScaleAndCutoff;\nuniform vec4 pbrParams;\nuniform vec4 emissive;\nuniform vec4 emissiveScaleParam;\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_normal;\n#if USE_VERTEX_COLOR\n  varying vec3 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_LIGHTMAP\n  varying vec2 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= v_color;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * pbrParams.w) * normalize(v_tangent) +\n      (nmmp.y * pbrParams.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture2D(pbrMap, PBR_UV);\n    pbr.x *= res.OCCLUSION_CHANNEL;\n    pbr.y *= res.ROUGHNESS_CHANNEL;\n    pbr.z *= res.METALLIC_CHANNEL;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture2D(metallicRoughnessMap, METALLIC_ROUGHNESS_UV);\n    pbr.z *= metallicRoughness.METALLIC_CHANNEL;\n    pbr.y *= metallicRoughness.ROUGHNESS_CHANNEL;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture2D(occlusionMap, OCCLUSION_UV).OCCLUSION_CHANNEL;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\nvec4 frag () {\n  StandardSurface s; surf(s);\n  vec4 color = CCStandardShading(s);\n  #if USE_LIGHTMAP && !USE_BATCHING\n    vec4 lighting = texture2D(cc_lightingMap, v_luv);\n    float fAmb = 0.5 - s.normal.y * 0.5;\n    vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 finalColor = (ambDiff.rgb * diffuse);\n    finalColor += lighting.rgb * diffuse;\n    finalColor = finalColor * s.occlusion;\n    finalColor += s.emissive;\n    color.rgb = lighting.a * finalColor + (1.0 - lighting.a) * color.rgb;\n  #endif\n  return CCFragOutput(color);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[{"name":"cc_environment","defines":["CC_USE_IBL"]}]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":[]}],"samplers":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["USE_LIGHTMAP"]}]}},"defines":[{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_SUPPORT_FLOAT_TEXTURE","type":"boolean"},{"name":"USE_BATCHING","type":"boolean"},{"name":"USE_LIGHTMAP","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"USE_NORMAL_MAP","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"CC_USE_IBL","type":"number","range":[0,2]},{"name":"CC_USE_HDR","type":"boolean"},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"ALBEDO_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"NORMAL_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean"},{"name":"PBR_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean"},{"name":"METALLIC_ROUGHNESS_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_OCCLUSION_MAP","type":"boolean"},{"name":"OCCLUSION_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_EMISSIVE_MAP","type":"boolean"},{"name":"EMISSIVE_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"OCCLUSION_CHANNEL","type":"string","options":["r","g","b"]},{"name":"ROUGHNESS_CHANNEL","type":"string","options":["g","b","r"]},{"name":"METALLIC_CHANNEL","type":"string","options":["b","r","g"]},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r"]}],"blocks":[{"name":"Constants","members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[],"binding":0}],"samplers":[{"name":"albedoMap","type":28,"count":1,"defines":["USE_ALBEDO_MAP"],"binding":31},{"name":"normalMap","type":28,"count":1,"defines":["USE_NORMAL_MAP"],"binding":32},{"name":"pbrMap","type":28,"count":1,"defines":["USE_PBR_MAP"],"binding":33},{"name":"metallicRoughnessMap","type":28,"count":1,"defines":["USE_METALLIC_ROUGHNESS_MAP"],"binding":34},{"name":"occlusionMap","type":28,"count":1,"defines":["USE_OCCLUSION_MAP"],"binding":35},{"name":"emissiveMap","type":28,"count":1,"defines":["USE_EMISSIVE_MAP"],"binding":36}],"attributes":[{"name":"a_position","type":15,"count":1,"defines":[],"format":32,"location":0},{"name":"a_normal","type":15,"count":1,"defines":[],"format":32,"location":1},{"name":"a_tangent","type":16,"count":1,"defines":[],"format":43,"location":2},{"name":"a_vertexId","type":13,"count":1,"defines":["CC_USE_MORPH"],"format":11,"location":3},{"name":"a_weights","type":16,"count":1,"defines":["CC_USE_SKINNING"],"format":43,"location":4},{"name":"a_joints","type":16,"count":1,"defines":["CC_USE_SKINNING"],"format":43,"location":5},{"name":"a_jointAnimInfo","type":16,"count":1,"precision":"highp ","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"],"format":43,"isInstanced":true,"location":6},{"name":"a_matWorld0","type":16,"count":1,"defines":["USE_INSTANCING"],"format":43,"isInstanced":true,"location":7},{"name":"a_matWorld1","type":16,"count":1,"defines":["USE_INSTANCING"],"format":43,"isInstanced":true,"location":8},{"name":"a_matWorld2","type":16,"count":1,"defines":["USE_INSTANCING"],"format":43,"isInstanced":true,"location":9},{"name":"a_lightingMapUVParam","type":16,"count":1,"defines":["USE_INSTANCING","USE_LIGHTMAP"],"format":43,"isInstanced":true,"location":10},{"name":"a_dyn_batch_id","type":13,"count":1,"defines":["!USE_INSTANCING","USE_BATCHING"],"format":11,"location":11},{"name":"a_color","type":15,"count":1,"defines":["USE_VERTEX_COLOR"],"format":32,"location":12},{"name":"a_texCoord","type":14,"count":1,"defines":[],"format":21,"location":13},{"name":"a_texCoord1","type":14,"count":1,"defines":[],"format":21,"location":14}],"record":null,"name":"builtin-standard|standard-vs:vert|standard-fs:frag"}]},[{"__type__":"cc.Prefab","data":{"__id__":1}},{"__type__":"cc.Node","_name":"CompanySuit","_children":[{"__id__":2}],"_components":[{"__type__":"cc.SkeletalAnimationComponent","node":{"__id__":1},"playOnLoad":true,"_clips":[{"__uuid__":"beOM+6kD9LDqOsIfaHc+Fj@49434"},{"__uuid__":"474mjZMsBPGpAGVf9ACM23@47256"}],"_defaultClip":{"__uuid__":"beOM+6kD9LDqOsIfaHc+Fj@49434"},"_useBakedAnimation":false},{"__type__":"36fc9bA6z9CiIzW6/3ChN0q","node":{"__id__":1}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"95aB1QsCZIkbQi+SDI/3n4","_synced":{"default":false,"serializable":false}},"_lscale":{"__type__":"cc.Vec3","x":5,"y":5,"z":5}},{"__type__":"cc.Node","_name":"RootNode","_parent":{"__id__":1},"_children":[{"__id__":3},{"__id__":49}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"eaxfoQBi5D57wqT/4G4v+2","_synced":{"default":false,"serializable":false}}},{"__type__":"cc.Node","_name":"Root","_parent":{"__id__":2},"_children":[{"__id__":4},{"__id__":10},{"__id__":16}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"c9HtD+XHlLqriL/cPh8Bv9","_synced":{"default":false,"serializable":false}},"_lrot":{"__type__":"cc.Quat","x":-0.7071068407911906,"w":0.7071067215818996},"_lscale":{"__type__":"cc.Vec3","x":100,"y":100,"z":100},"_euler":{"__type__":"cc.Vec3","x":-90.0000096593463}},{"__type__":"cc.Node","_name":"LeftFootCtrl","_parent":{"__id__":3},"_children":[{"__id__":5},{"__id__":8},{"__id__":9}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"afa7FlZlRKma90tRM7tYUc","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":0.00204208795912564,"y":0.0014880996895954,"z":0.00193204788956791},"_lrot":{"__type__":"cc.Quat","x":-0.4999999180436023,"y":-0.5000000670552165,"z":0.5000001266598624,"w":0.49999988824127883},"_euler":{"__type__":"cc.Vec3","y":-90.00000341509538,"z":90}},{"__type__":"cc.Node","_name":"LeftHeelRoll","_parent":{"__id__":4},"_children":[{"__id__":6}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"ed3MPHmZlKY62/OdzUhqgc","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":0.000708525301888585,"y":0.00179901428055018,"z":-0.000222404283704236},"_lrot":{"__type__":"cc.Quat","x":-0.5075117973678124,"y":0.5082283644112567,"z":-0.49190625819821215,"w":-0.4921015528178969},"_euler":{"__type__":"cc.Vec3","x":89.94726032849485,"y":-90.03070734915994,"z":-1.818192187801658}},{"__type__":"cc.Node","_name":"LeftToeRoll","_parent":{"__id__":5},"_children":[{"__id__":7}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"dfYJjmjKJLD4P4Ftp13HEm","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-0.000286642374703661,"y":0.00306932860985398,"z":0.0000104252949313377},"_lrot":{"__type__":"cc.Quat","x":0.015735853457592045,"y":-0.002078737597143815,"z":0.9946247335570452,"w":-0.1023215576627946},"_lscale":{"__type__":"cc.Vec3","x":0.999998211860657,"y":0.99999988079071,"z":1},"_euler":{"__type__":"cc.Vec3","x":179.94645889271416,"y":-178.1927186234364,"z":-11.748055571781153}},{"__type__":"cc.Node","_name":"LeftFootIK","_parent":{"__id__":6},"_children":[{"__type__":"cc.Node","_name":"LeftFootIK_end","_parent":{"__id__":7},"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"77egnzZK1Hc6GeZWQqmkHs","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","y":0.00301254238002002,"z":2.08166812464326e-19}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"cewl+zSjhK0bzjxdZ60R2k","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-0.0000182142302946886,"y":0.00241521745920181,"z":0.00180049950722605},"_lrot":{"__type__":"cc.Quat","x":0.9461288575894935,"y":-0.021870851802777792,"z":0.07550260523365644,"w":-0.31410381608753424},"_euler":{"__type__":"cc.Vec3","x":-143.60078157947333,"y":-7.448980598171048,"z":-5.095530671794999}},{"__type__":"cc.Node","_name":"LeftFootRollCtrl","_parent":{"__id__":4},"_children":[{"__type__":"cc.Node","_name":"LeftFootRollCtrl_end","_parent":{"__id__":8},"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"dcpOZEn+xLTqd2LbZdfbWy","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-5.55111499904869e-19,"y":0.00292766653001308}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"40Kj1wZyRNyYOYsYi9Nk/8","_synced":{"default":false,"serializable":false}},"_lrot":{"__type__":"cc.Quat","x":0.5000000074505733,"y":0.4999999776482508,"z":-0.4999998882412815,"w":0.500000126659865},"_euler":{"__type__":"cc.Vec3","x":89.99998804716846,"y":89.99998463207392,"z":-0.0000017075456926841831}},{"__type__":"cc.Node","_name":"LeftKneeCtrl","_parent":{"__id__":4},"_children":[{"__type__":"cc.Node","_name":"LeftKneeCtrl_end","_parent":{"__id__":9},"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"6243TFUANEer3o0vBudxe+","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":2.77555749952435e-19,"y":0.00336815696209669}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"b5MjBY5cFLnLnCXdmiF1Qr","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-0.00617957813665271,"y":-0.00586700532585382,"z":0.000258870219113305},"_lrot":{"__type__":"cc.Quat","x":0.7071069600004604,"y":-5.338506261824736e-8,"z":-0.7071066023725853,"w":-5.338509103995725e-8},"_euler":{"__type__":"cc.Vec3","x":-179.99999134857796,"y":89.99997102196099,"z":1.1518654167389903e-13}},{"__type__":"cc.Node","_name":"RightFootCtrl","_parent":{"__id__":3},"_children":[{"__id__":11},{"__id__":14},{"__id__":15}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"eaDyqT21xDupc0ntF9y2Ft","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-0.00207520485855639,"y":0.00148810027167201,"z":0.00193204788956791},"_lrot":{"__type__":"cc.Quat","x":-0.4999999180436023,"y":-0.5000000670552165,"z":0.5000001266598624,"w":0.49999988824127883},"_euler":{"__type__":"cc.Vec3","y":-90.00000341509538,"z":90}},{"__type__":"cc.Node","_name":"RightHeelRoll","_parent":{"__id__":10},"_children":[{"__id__":12}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"6fRYtBxyFKxJaWHWXJDYvp","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":0.00070852559292689,"y":0.00179901428055018,"z":0.000222404021769762},"_lrot":{"__type__":"cc.Quat","x":-0.5076856580869806,"y":0.5079020229461395,"z":-0.4917279152590147,"w":-0.49243727013197514},"_euler":{"__type__":"cc.Vec3","x":89.94738452076858,"y":-89.97257702554124,"z":-1.800463291576105}},{"__type__":"cc.Node","_name":"RightToeRoll","_parent":{"__id__":11},"_children":[{"__id__":13}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"04iMW2DX1GrYEX7so4BjsB","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":0.000286728813080117,"y":0.00306932860985398,"z":-0.00000768702830100665},"_lrot":{"__type__":"cc.Quat","x":0.015675768696385494,"y":0.0011517381386155707,"z":0.9946256559250537,"w":0.10233644683442138},"_lscale":{"__type__":"cc.Vec3","x":0.999993443489075,"y":0.999999940395355,"z":1},"_euler":{"__type__":"cc.Vec3","x":179.9463175716444,"y":-178.188609620709,"z":11.748084504975564}},{"__type__":"cc.Node","_name":"RightFootIK","_parent":{"__id__":12},"_children":[{"__type__":"cc.Node","_name":"RightFootIK_end","_parent":{"__id__":13},"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"77GuDzJBJAqYka8mivD0LU","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","y":0.00301254261285067}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"d9bsUzg4RIW4PPsiFwDAtb","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":0.0000182140829565469,"y":0.00241521745920181,"z":0.00180049950722605},"_lrot":{"__type__":"cc.Quat","x":0.9481119066135607,"y":0.011444971144850335,"z":-0.04409314388632439,"w":-0.31465635197038766},"_euler":{"__type__":"cc.Vec3","x":-143.38898486236454,"y":4.387505451631285,"z":2.834466831357761}},{"__type__":"cc.Node","_name":"RightFootRollCtrl","_parent":{"__id__":10},"_children":[{"__type__":"cc.Node","_name":"RightFootRollCtrl_end","_parent":{"__id__":14},"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"0cWGRxPU5LK6M9QIfhK3PW","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-2.77555749952435e-19,"y":0.00292766653001308,"z":2.77555749952435e-19}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"7c612K3o5F2aNmRh3CYfd5","_synced":{"default":false,"serializable":false}},"_lrot":{"__type__":"cc.Quat","x":0.5000000074505733,"y":0.4999999776482508,"z":-0.4999998882412815,"w":0.500000126659865},"_euler":{"__type__":"cc.Vec3","x":89.99998804716846,"y":89.99998463207392,"z":-0.0000017075456926841831}},{"__type__":"cc.Node","_name":"RightKneeCtrl","_parent":{"__id__":10},"_children":[{"__type__":"cc.Node","_name":"RightKneeCtrl_end","_parent":{"__id__":15},"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"87rC95xWZNAKxirLrNB20S","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","y":0.00336815696209669,"z":5.55111499904869e-19}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"4cpAvETN5N+a+h3P2auOoX","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-0.006179578602314,"y":-0.00586700532585382,"z":-0.00029198219999671},"_lrot":{"__type__":"cc.Quat","x":0.7071069600004604,"y":-5.338506261824736e-8,"z":-0.7071066023725853,"w":-5.338509103995725e-8},"_euler":{"__type__":"cc.Vec3","x":-179.99999134857796,"y":89.99997102196099,"z":1.1518654167389903e-13}},{"__type__":"cc.Node","_name":"HipsCtrl","_parent":{"__id__":3},"_children":[{"__id__":17}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"1cqhJS5AFOtLac+YIomtM4","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-0.00000223408756028221,"y":-0.000312402553390712,"z":0.0156417209655046},"_lrot":{"__type__":"cc.Quat","x":0.000954656536519791,"y":0.7071061312425001,"z":-0.7071059524285616,"w":0.0010861999163157732},"_euler":{"__type__":"cc.Vec3","x":89.99997012930388,"y":179.83463246640054,"z":-0.01065872660767315}},{"__type__":"cc.Node","_name":"Hips","_parent":{"__id__":16},"_children":[{"__id__":18},{"__id__":41},{"__id__":45}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"09aZ8BvAtDgKWuX8HqJtLA","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":0.00000464599497718154,"y":0.00321950996294618,"z":-4.69114136425475e-10},"_lrot":{"__type__":"cc.Quat","x":0.00009301443314169477,"y":-2.6647789058544467e-7,"z":0.999998954399776,"w":0.0014431034608522442},"_lscale":{"__type__":"cc.Vec3","x":1.00000405311584,"y":1,"z":0.99999988079071},"_euler":{"__type__":"cc.Vec3","x":179.99995408216176,"y":-179.9893412537161,"z":0.16536752925709802}},{"__type__":"cc.Node","_name":"Spine","_parent":{"__id__":17},"_children":[{"__id__":19}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"7dsJ6QwE9K4Jzv0ujgZ6nZ","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-5.04653285306189e-14,"y":0.00321951601654291,"z":7.75561472682318e-12},"_lrot":{"__type__":"cc.Quat","x":-0.06104257414595956,"y":-1.0545779506515412e-8,"z":-1.0392164605814746e-8,"w":0.9981351632627893},"_lscale":{"__type__":"cc.Vec3","x":1.00000405311584,"y":0.999999940395355,"z":1.00000023841858},"_euler":{"__type__":"cc.Vec3","x":-6.9993151395081386,"y":-0.0000012788965537824912,"z":-0.0000011148662496670151}},{"__type__":"cc.Node","_name":"Chest","_parent":{"__id__":18},"_children":[{"__id__":20}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"abkvpdZy1CxrAG7hQY2Zah","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":1.36244964962784e-13,"y":0.00287048821337521,"z":2.56062199222029e-10},"_lrot":{"__type__":"cc.Quat","x":0.011894642458099926,"y":9.999340980352255e-9,"z":1.1040930913014513e-8,"w":0.9999292562380571},"_euler":{"__type__":"cc.Vec3","x":1.3630577660954377,"y":0.0000011307099393956101,"z":0.0000012787373395653769}},{"__type__":"cc.Node","_name":"UpperChest","_parent":{"__id__":19},"_children":[{"__id__":21},{"__id__":23},{"__id__":32}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"a28kfOPpZEsonG2KmmAqd3","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":4.39977161352675e-15,"y":0.00305276596918702,"z":-2.6077359716048e-10},"_lrot":{"__type__":"cc.Quat","x":0.04916578579063851,"y":-3.827961747847793e-13,"z":-1.8956675470877708e-14,"w":0.998790631467671},"_euler":{"__type__":"cc.Vec3","x":5.63625633141832,"y":-4.370535964550877e-11,"z":-4.32631545616845e-12}},{"__type__":"cc.Node","_name":"Neck","_parent":{"__id__":20},"_children":[{"__id__":22}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"adP04Xw9hEYqiS8YwKww5G","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":2.29707695058182e-14,"y":0.00270864507183433,"z":-4.29350131836426e-11},"_lrot":{"__type__":"cc.Quat","x":0.07661575647405183,"y":-2.541474188178239e-13,"z":-3.6255769685435527e-12,"w":0.9970606931676271},"_euler":{"__type__":"cc.Vec3","x":8.788131006577878,"y":2.793274735841114e-12,"z":-4.16470643345303e-10}},{"__type__":"cc.Node","_name":"Head","_parent":{"__id__":21},"_children":[{"__type__":"cc.Node","_name":"Head_end","_parent":{"__id__":22},"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"33Y9LcPmBH3JMAbW/LhEZt","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","y":0.0100440997630358,"z":-5.20417031160815e-20}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"fbRPXYrbpJMJDzJh+KnsID","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":1.36966189800448e-13,"y":0.00278009264729917,"z":-1.3969514434109e-10},"_lrot":{"__type__":"cc.Quat","x":-0.07413526788375326,"y":-2.526978350191083e-14,"z":-8.820014514358352e-15,"w":0.9972481948120057},"_lscale":{"__type__":"cc.Vec3","x":1.00000405311584,"y":0.99999988079071,"z":1},"_euler":{"__type__":"cc.Vec3","x":-8.50307696119117,"y":-2.9626639317239065e-12,"z":-7.932441830641405e-13}},{"__type__":"cc.Node","_name":"LeftShoulder","_parent":{"__id__":20},"_children":[{"__id__":24}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"47r/gR+QNLN6BpMzXQaPFt","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":0.000882800377439708,"y":0.00281081884168088,"z":0.000649610592518002},"_lrot":{"__type__":"cc.Quat","x":0.5868819918674754,"y":0.4106536186257134,"z":0.5482944815008771,"w":-0.4316321288863422},"_euler":{"__type__":"cc.Vec3","x":-106.86547385566185,"y":-86.47547061145613,"z":0.49775754274766926}},{"__type__":"cc.Node","_name":"LeftArm","_parent":{"__id__":23},"_children":[{"__id__":25}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"0c9YC/EI9Op5yyIBU1rxj5","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","y":0.00258801435120404,"z":-2.56957721767037e-9},"_lrot":{"__type__":"cc.Quat","x":0.08388999819837153,"y":0.710812923774136,"z":0.061310611448036366,"w":0.6956640457302717},"_lscale":{"__type__":"cc.Vec3","x":1.00000059604645,"y":0.999995768070221,"z":1.00000691413879},"_euler":{"__type__":"cc.Vec3","x":1.7303843124624205,"y":91.05530329639839,"z":11.803940098082514}},{"__type__":"cc.Node","_name":"LeftForeArm","_parent":{"__id__":24},"_children":[{"__id__":26}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"2auaoHJJdJpb2oQjub5z9n","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-2.99623925670289e-9,"y":0.00470774946734309,"z":2.32830629776082e-11},"_lrot":{"__type__":"cc.Quat","x":0.04676153975048411,"y":0.012573271305091392,"z":0.005446292566779431,"w":0.998812099018694},"_euler":{"__type__":"cc.Vec3","x":5.352435421847865,"y":1.4101402285586355,"z":0.6907481150250958}},{"__type__":"cc.Node","_name":"LeftHand","_parent":{"__id__":25},"_children":[{"__id__":27},{"__id__":30}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"b82Et5f1hMR7KcKRTuVgYN","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-2.58907673078568e-9,"y":0.005272276699543,"z":-3.72529021519519e-11},"_lrot":{"__type__":"cc.Quat","x":-0.02654678001598739,"y":0.7247396706439712,"z":-0.021308183666824243,"w":0.6881814001950881},"_euler":{"__type__":"cc.Vec3","x":-0.324597638968855,"y":92.95329137209885,"z":-3.888026754848794}},{"__type__":"cc.Node","_name":"LeftHandIndex1","_parent":{"__id__":26},"_children":[{"__id__":28}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"34AoHy5BlBU6q8iJP4Qube","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-4.65661259552164e-11,"y":0.00138599774800241,"z":-1.87428672582257e-9},"_lrot":{"__type__":"cc.Quat","x":0.05672738199445309,"y":-0.07746504070851837,"z":0.00014853867131231052,"w":0.995379902115944},"_euler":{"__type__":"cc.Vec3","x":6.485841076594989,"y":-8.872530312162022,"z":-0.48662309375145174}},{"__type__":"cc.Node","_name":"LeftHandIndex2","_parent":{"__id__":27},"_children":[{"__id__":29}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"11mc9gjR9BQKlv/99vupVd","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-1.11758706455856e-10,"y":0.00112821429502219,"z":-7.31088189986906e-10},"_lrot":{"__type__":"cc.Quat","x":0.08137375815075476,"y":0.06692219487472909,"z":-0.0006391020106085453,"w":0.9944341722136218},"_euler":{"__type__":"cc.Vec3","x":9.319212488514703,"y":7.655103127358713,"z":0.5512128805258677}},{"__type__":"cc.Node","_name":"LeftHandIndex3","_parent":{"__id__":28},"_children":[{"__type__":"cc.Node","_name":"LeftHandIndex3_end","_parent":{"__id__":29},"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"57++vWZFBAMIEBxzZ3c77x","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","y":0.00130498840007931,"z":-4.44089199923895e-18}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"482Mjdks1MY7ljuOjDzIjX","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":3.72529021519519e-11,"y":0.0010213041678071,"z":-3.4901312950808e-9},"_lrot":{"__type__":"cc.Quat","x":0.03097177504171177,"y":-0.030524252189828602,"z":0.0008921602917876609,"w":0.9990536638384502},"_euler":{"__type__":"cc.Vec3","x":3.5511391047079464,"y":-3.4998539884189612,"z":-0.006196454215366728}},{"__type__":"cc.Node","_name":"LeftHandThumb1","_parent":{"__id__":26},"_children":[{"__id__":31}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"82o8Vwp85Nmq7DuldaJ9ZS","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-0.000651483365800232,"y":0.000509810342919081,"z":0.0000244537368416786},"_lrot":{"__type__":"cc.Quat","x":-0.3360726521619656,"y":0.6307119105376121,"z":0.44692852910948605,"w":0.5380637027739826},"_euler":{"__type__":"cc.Vec3","x":-67.96143062547834,"y":101.26827746787151,"z":3.2688924407296653}},{"__type__":"cc.Node","_name":"LeftHandThumb2","_parent":{"__id__":30},"_children":[{"__type__":"cc.Node","_name":"LeftHandThumb2_end","_parent":{"__id__":31},"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"7f43DGU9BF15MXvlmry/Tn","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-4.44089199923895e-18,"y":0.00132259679958224}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"86wjVO6YVC0obqHPSFUHiS","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":1.49011608607807e-10,"y":0.00105867790989578,"z":-1.73226000210747e-9},"_lrot":{"__type__":"cc.Quat","x":0.20120007004006213,"y":-0.013493429075109625,"z":0.003930167800608821,"w":0.9794493417062099},"_euler":{"__type__":"cc.Vec3","x":23.218435482721567,"y":-1.6052843893625168,"z":0.13000668639900254}},{"__type__":"cc.Node","_name":"RightShoulder","_parent":{"__id__":20},"_children":[{"__id__":33}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"60OoKqJiZJC6cCSaIQCnm0","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-0.00088280055206269,"y":0.00281081884168088,"z":0.000649610592518002},"_lrot":{"__type__":"cc.Quat","x":0.6583795538909445,"y":-0.507611154848746,"z":0.45999342143222577,"w":0.31188672740364926},"_euler":{"__type__":"cc.Vec3","x":108.29128018866523,"y":-86.1868563932423,"z":-22.42476299672426}},{"__type__":"cc.Node","_name":"RightArm","_parent":{"__id__":32},"_children":[{"__id__":34}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"e4/eGE24BO55WoHF7YjDj7","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":1.49011608607807e-10,"y":0.00258801388554275,"z":-5.72763392270303e-10},"_lrot":{"__type__":"cc.Quat","x":-0.0009363195181501057,"y":0.9648764035228143,"z":-0.10390248043859804,"w":-0.24128183476869067},"_lscale":{"__type__":"cc.Vec3","x":1.00000703334808,"y":0.999995529651642,"z":1.00000131130219},"_euler":{"__type__":"cc.Vec3","x":11.606735361175991,"y":-152.20212054854866,"z":2.7703388744426243}},{"__type__":"cc.Node","_name":"RightForeArm","_parent":{"__id__":33},"_children":[{"__id__":35}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"16jsYE7+tBNpCaFcloLaLP","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-1.53668217039993e-10,"y":0.0047077490016818,"z":2.45199771597981e-9},"_lrot":{"__type__":"cc.Quat","x":0.0007336911581963405,"y":-0.004767492458632616,"z":0.04707185223536286,"w":0.9988798593625127},"_euler":{"__type__":"cc.Vec3","x":0.11018493844437588,"y":-0.5521147933757764,"z":5.395565191956425}},{"__type__":"cc.Node","_name":"RightHand","_parent":{"__id__":34},"_children":[{"__id__":36},{"__id__":39}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"81SkCuQOZEBqTa6edMX+Vp","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":7.45058043039037e-11,"y":0.00527227576822042,"z":9.03382868511216e-10},"_lrot":{"__type__":"cc.Quat","x":0.008204220688409371,"y":0.00033306265984766996,"z":-0.03303726347427376,"w":0.9994203915541706},"_euler":{"__type__":"cc.Vec3","x":0.9429508160514525,"y":0.06935489506558075,"z":-3.786038760628649}},{"__type__":"cc.Node","_name":"RightHandIndex1","_parent":{"__id__":35},"_children":[{"__id__":37}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"e4dTLUE9tLRLyZGiHIPqtK","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":2.70083538866928e-10,"y":0.00138599809724838,"z":-1.16415314888041e-11},"_lrot":{"__type__":"cc.Quat","x":-0.0567272626261071,"y":-0.07746363233161525,"z":-0.00014847115001088526,"w":0.9953800185342573},"_euler":{"__type__":"cc.Vec3","x":-6.485827504861674,"y":-8.872368314635539,"z":0.48662057858473484}},{"__type__":"cc.Node","_name":"RightHandIndex2","_parent":{"__id__":36},"_children":[{"__id__":38}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"f7ME9N0yxP/qNsVbSZ9ue5","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":2.04890965305182e-10,"y":0.00112821243237704,"z":-8.40518599165563e-10},"_lrot":{"__type__":"cc.Quat","x":-0.08137267286463262,"y":0.0669212879587944,"z":0.0006392499359029679,"w":0.9944343219581275},"_euler":{"__type__":"cc.Vec3","x":-9.319089600402055,"y":7.655001273563245,"z":-0.551179231954136}},{"__type__":"cc.Node","_name":"RightHandIndex3","_parent":{"__id__":37},"_children":[{"__type__":"cc.Node","_name":"RightHandIndex3_end","_parent":{"__id__":38},"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"66dS5xoHpJeaNogq03DPMx","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","y":0.00130498828366399}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"a4qOQPIHxEzIm7DMYewbWg","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":1.49011608607807e-10,"y":0.00102130591403693,"z":1.33644784128251e-9},"_lrot":{"__type__":"cc.Quat","x":-0.030973843616559308,"y":-0.030523022032086625,"z":-0.0008921936210445753,"w":0.9990536372628791},"_euler":{"__type__":"cc.Vec3","x":-3.5513762734997143,"y":-3.4997131302457363,"z":0.006195510551708889}},{"__type__":"cc.Node","_name":"RightHandThumb1","_parent":{"__id__":35},"_children":[{"__id__":40}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"05HnUarw9EMYRoruscpuO3","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-0.000639192352537066,"y":0.000509811856318265,"z":-0.000128300831420347},"_lrot":{"__type__":"cc.Quat","x":-0.35837400076476245,"y":0.7295987033803776,"z":-0.4292520298656163,"w":-0.39369595179246897},"_euler":{"__type__":"cc.Vec3","x":67.59209628870079,"y":-116.15154247033044,"z":-10.65814965351478}},{"__type__":"cc.Node","_name":"RightHandThumb2","_parent":{"__id__":39},"_children":[{"__type__":"cc.Node","_name":"RightHandThumb2_end","_parent":{"__id__":40},"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"1eJO07TVRId4kFleO1TTk7","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","y":0.00132259679958224}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"092pX8rK1LTLPTwJ41luFC","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":2.98023217215615e-10,"y":0.0010586769785732,"z":-2.60770322002557e-10},"_lrot":{"__type__":"cc.Quat","x":-0.19090290898184947,"y":-0.02567141574444894,"z":0.06366158453732713,"w":0.9792059336064809},"_euler":{"__type__":"cc.Vec3","x":-21.96221534086861,"y":-1.5017159409213234,"z":7.728384126580532}},{"__type__":"cc.Node","_name":"LeftUpLeg","_parent":{"__id__":17},"_children":[{"__id__":42}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"acqvED3XdBFrWSfsNnbgxw","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":0.00201529101468623,"y":0.000584633031394333,"z":7.50920603476146e-10},"_lrot":{"__type__":"cc.Quat","x":0.9867030585018121,"y":0.001060975737331188,"z":0.16252845859892867,"w":0.0006699396318656902},"_lscale":{"__type__":"cc.Vec3","x":1.00005459785461,"y":1.00000143051147,"z":1.00000047683716},"_euler":{"__type__":"cc.Vec3","x":179.94401123855928,"y":-18.707325317351774,"z":0.1324395713452718}},{"__type__":"cc.Node","_name":"LeftLeg","_parent":{"__id__":41},"_children":[{"__id__":43}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"b3M6o1Z/BC4Z90vu9W20w0","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":1.49011608607807e-10,"y":0.00526174064725637,"z":2.4447216820378e-11},"_lrot":{"__type__":"cc.Quat","x":0.14157400740951123,"y":0.03244448015495825,"z":0.05285427613199511,"w":0.9879830877236964},"_lscale":{"__type__":"cc.Vec3","x":0.999999463558197,"y":0.999998807907104,"z":1.0000022649765},"_euler":{"__type__":"cc.Vec3","x":16.14785065820299,"y":2.835232765990684,"z":6.524314976845145}},{"__type__":"cc.Node","_name":"LeftFoot","_parent":{"__id__":42},"_children":[{"__id__":44}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"baX/h/CH5N/bRkWz+vgEYv","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-5.58793532279278e-11,"y":0.006088110152632,"z":1.86264503820865e-10},"_lrot":{"__type__":"cc.Quat","x":-0.5438064825990527,"y":-0.19418122982972802,"z":-0.18754350770632935,"w":0.7946040474237884},"_lscale":{"__type__":"cc.Vec3","x":1.0000205039978,"y":0.999983608722687,"z":0.999995768070221},"_euler":{"__type__":"cc.Vec3","x":-70.15439478381053,"y":-30.964931935396027,"z":-4.982509724937367}},{"__type__":"cc.Node","_name":"LeftToes","_parent":{"__id__":43},"_children":[{"__type__":"cc.Node","_name":"LeftToes_end","_parent":{"__id__":44},"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"8dVQSahaJFTp5qqZIDhvh1","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","y":0.00213236291892827}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"21BwRezLVEYbYxYVzStiap","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-6.40284283925929e-11,"y":0.00301253935322165,"z":-9.31322467062623e-12},"_lrot":{"__type__":"cc.Quat","x":-0.019817861237074703,"y":0.9522868010246827,"z":-0.2982552713813933,"w":0.061651391414761766},"_euler":{"__type__":"cc.Vec3","x":34.5539906301858,"y":173.92141121101008,"z":-4.273659257217963}},{"__type__":"cc.Node","_name":"RightUpLeg","_parent":{"__id__":17},"_children":[{"__id__":46}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"77134/D4VNKKulXQEIj8vn","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-0.00201529101468623,"y":0.000584633089601994,"z":7.52093609612814e-10},"_lrot":{"__type__":"cc.Quat","x":0.9765877156996218,"y":-0.0013587963808184811,"z":-0.21511474316394275,"w":0.00048424219276064866},"_lscale":{"__type__":"cc.Vec3","x":0.999986946582794,"y":0.999999463558197,"z":0.999999284744263},"_euler":{"__type__":"cc.Vec3","x":179.97930378053684,"y":24.84451487948227,"z":-0.16399810421164296}},{"__type__":"cc.Node","_name":"RightLeg","_parent":{"__id__":45},"_children":[{"__id__":47}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"44dO6x+apGwbOuxvbGK9K6","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-6.98491889328245e-11,"y":0.00526174064725637,"z":-4.83123575867328e-11},"_lrot":{"__type__":"cc.Quat","x":0.13894787376406742,"y":0.011510127179000441,"z":-0.059173218674439955,"w":0.9884632191136273},"_euler":{"__type__":"cc.Vec3","x":16.132309217258854,"y":2.261185773310559,"z":-6.533405639420454}},{"__type__":"cc.Node","_name":"RightFoot","_parent":{"__id__":46},"_children":[{"__id__":48}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"650BBBekNJD4+wKkU5DdJH","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":-1.30385161001279e-10,"y":0.00608811760321259,"z":-1.86264503820865e-10},"_lrot":{"__type__":"cc.Quat","x":-0.5484954684871495,"y":0.22882911438163542,"z":0.1718207886388219,"w":0.7856637792668771},"_lscale":{"__type__":"cc.Vec3","x":0.999994993209839,"y":1.00000369548798,"z":1.0000011920929},"_euler":{"__type__":"cc.Vec3","x":-70.16444673348575,"y":33.24018137605528,"z":1.086580794867392}},{"__type__":"cc.Node","_name":"RightToes","_parent":{"__id__":47},"_children":[{"__type__":"cc.Node","_name":"RightToes_end","_parent":{"__id__":48},"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"2e6qjc4qlAAagEa3tWc5wi","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","y":0.00213236291892827}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"e6W+dHL2NKJai6+T9CbmT4","_synced":{"default":false,"serializable":false}},"_lpos":{"__type__":"cc.Vec3","x":2.61934474110603e-10,"y":0.00301254447549582,"z":-1.86264503820865e-10},"_lrot":{"__type__":"cc.Quat","x":0.02826088071267615,"y":0.9539411539606566,"z":-0.2975736221607838,"w":-0.02544674430385272},"_euler":{"__type__":"cc.Vec3","x":34.58669175829483,"y":-178.17734585021034,"z":3.960170481137846}},{"__type__":"cc.Node","_name":"characterMedium","_parent":{"__id__":2},"_components":[{"__type__":"cc.SkinningModelComponent","node":{"__id__":49},"_materials":[{"__uuid__":"b44TzzLvZEmbzku5Nwg7SF"},{"__uuid__":"b44TzzLvZEmbzku5Nwg7SF"}],"lightmapSettings":{"__type__":"cc.ModelLightmapSettings"},"_mesh":{"__uuid__":"a6/dtb0khPpIwv+8mxiOVS@73e25"},"_skeleton":{"__uuid__":"a6/dtb0khPpIwv+8mxiOVS@438fe"},"_skinningRoot":{"__id__":1}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"bbmgZkFfZMU7nKkPkFP2ZB","_synced":{"default":false,"serializable":false}},"_lrot":{"__type__":"cc.Quat","x":-0.7071068407911906,"w":0.7071067215818996},"_lscale":{"__type__":"cc.Vec3","x":100,"y":100,"z":100},"_euler":{"__type__":"cc.Vec3","x":-90.0000096593463}}],{"__type__":"cc.Material","_effectAsset":{"__uuid__":"1brw/JvvpFnIvdrxpFCgMZ"},"_defines":[{"USE_ALBEDO_MAP":true}],"_states":[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],"_props":[{"mainTexture":{"__uuid__":"02HAQunU5NfZ/dh6Dj6i9Z@6c48a"}}]}]
